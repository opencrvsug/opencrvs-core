/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql'
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  listNotifications?: Array<GQLNotification | null>
  fetchBirthRegistration?: GQLBirthRegistration
  searchBirthRegistrations?: Array<GQLBirthRegistration | null>
  searchDeathRegistrations?: Array<GQLDeathRegistration | null>
  queryRegistrationByIdentifier?: GQLBirthRegistration
  queryPersonByIdentifier?: GQLPerson
  listBirthRegistrations?: GQLBirthRegResultSet
  fetchDeathRegistration?: GQLDeathRegistration
  fetchEventRegistration?: GQLEventRegistration
  fetchRegistration?: GQLEventRegistration
  queryPersonByNidIdentifier?: GQLPerson
  fetchRegistrationCountByStatus?: GQLRegistrationCountResult
  locationsByParent?: Array<GQLLocation | null>
  locationById?: GQLLocation
  hasChildLocation?: GQLLocation
  getUser?: GQLUser
  getUserByMobile?: GQLUser
  searchUsers?: GQLSearchUserResult
  searchFieldAgents?: GQLSearchFieldAgentResult
  verifyPasswordById?: GQLVerifyPasswordResult
  getTotalMetrics?: GQLTotalMetricsResult
  getTotalVSExport?: GQLTotalVSExport
  getTotalPayments?: Array<GQLPaymentMetric>
  getTotalCertifications?: Array<GQLCertificationMetric>
  getTotalCorrections?: Array<GQLCorrectionMetric>
  getLocationStatistics?: GQLLocationStatisticsResponse
  getDeclarationsStartedMetrics?: GQLDeclarationsStartedMetrics
  fetchMonthWiseEventMetrics?: Array<GQLMonthWiseEstimationMetric>
  fetchLocationWiseEventMetrics?: Array<GQLLocationWiseEstimationMetric>
  fetchTimeLoggedMetricsByPractitioner?: GQLTimeLoggedMetricsResultSet
  searchEvents?: GQLEventSearchResultSet
  getEventsWithProgress?: GQLEventProgressResultSet
  getRoles?: Array<GQLRole | null>
  getCertificateSVG?: GQLCertificateSVG
  getActiveCertificatesSVG?: Array<GQLCertificateSVG | null>
  getFormDraft?: Array<GQLFormDraft>
}

export interface GQLMutation {
  createNotification: GQLNotification
  voidNotification?: GQLNotification
  createBirthRegistration: GQLCreatedIds
  updateBirthRegistration: string
  markBirthAsVerified?: GQLBirthRegistration
  markBirthAsValidated?: string
  markBirthAsRegistered: GQLBirthRegistration
  markBirthAsCertified: string
  requestBirthRegistrationCorrection: string
  markEventAsVoided: string
  markEventAsReinstated?: GQLReinstated
  markEventAsArchived: string
  notADuplicate: string
  createDeathRegistration: GQLCreatedIds
  updateDeathRegistration: string
  markDeathAsVerified?: GQLDeathRegistration
  markDeathAsValidated?: string
  markDeathAsRegistered: GQLDeathRegistration
  markDeathAsCertified: string
  requestDeathRegistrationCorrection: string
  markEventAsUnassigned: string
  createOrUpdateUser: GQLUser
  activateUser?: string
  changePassword?: string
  changePhone?: string
  changeAvatar?: GQLAvatar
  auditUser?: string
  resendSMSInvite?: string
  createOrUpdateCertificateSVG?: GQLCertificateSVG
  updateApplicationConfig?: GQLApplicationConfiguration
  createFormDraft?: GQLFormDraft
  modifyDraftStatus?: GQLFormDraft
  deleteFormDraft?: string
}

export interface GQLDummy {
  dummy: string
}

export interface GQLNotification {
  id: string
  child?: GQLPerson
  mother?: GQLPerson
  father?: GQLPerson
  informant?: GQLPerson
  location?: GQLLocation
  createdAt?: GQLDate
  updatedAt?: GQLDate
}

export type GQLDate = any

export interface GQLBirthRegistration extends GQLEventRegistration {
  id: string
  _fhirIDMap?: GQLMap
  registration?: GQLRegistration
  child?: GQLPerson
  mother?: GQLPerson
  father?: GQLPerson
  informant?: GQLRelatedPerson
  eventLocation?: GQLLocation
  birthType?: GQLBirthType
  questionnaire?: Array<GQLQuestionnaireQuestion | null>
  weightAtBirth?: number
  attendantAtBirth?: GQLAttendantType
  otherAttendantAtBirth?: string
  birthRegistrationType?: GQLBirthRegType
  childrenBornAliveToMother?: number
  foetalDeathsToMother?: number
  lastPreviousLiveBirth?: GQLDate
  createdAt?: GQLDate
  updatedAt?: GQLDate
  history?: Array<GQLHistory | null>
}

export interface GQLDeathRegistration extends GQLEventRegistration {
  id: string
  _fhirIDMap?: GQLMap
  registration?: GQLRegistration
  deceased?: GQLPerson
  informant?: GQLRelatedPerson
  mother?: GQLPerson
  father?: GQLPerson
  spouse?: GQLPerson
  eventLocation?: GQLLocation
  questionnaire?: Array<GQLQuestionnaireQuestion | null>
  mannerOfDeath?: GQLMannerOfDeath
  deathDescription?: string
  causeOfDeathMethod?: GQLCauseOfDeathMethodType
  causeOfDeathEstablished?: string
  causeOfDeath?: string
  maleDependentsOfDeceased?: number
  femaleDependentsOfDeceased?: number
  medicalPractitioner?: GQLMedicalPractitioner
  createdAt?: GQLDate
  updatedAt?: GQLDate
  history?: Array<GQLHistory | null>
}

export interface GQLPerson {
  id?: string
  _fhirID?: string
  identifier?: Array<GQLIdentityType | null>
  name?: Array<GQLHumanName | null>
  telecom?: Array<GQLContactPoint | null>
  gender?: string
  birthDate?: string
  age?: number
  maritalStatus?: GQLMaritalStatusType
  occupation?: string
  detailsExist?: boolean
  reasonNotApplying?: string
  dateOfMarriage?: GQLDate
  multipleBirth?: number
  address?: Array<GQLAddress | null>
  photo?: Array<GQLAttachment | null>
  deceased?: GQLDeceased
  nationality?: Array<string | null>
  educationalAttainment?: GQLEducationType
}

export interface GQLBirthRegResultSet {
  results?: Array<GQLBirthRegistration | null>
  totalItems?: number
}

export interface GQLEventRegistration {
  id: string
  registration?: GQLRegistration
  history?: Array<GQLHistory | null>
  createdAt?: GQLDate
}

/** Use this to resolve interface type EventRegistration */
export type GQLPossibleEventRegistrationTypeNames =
  | 'BirthRegistration'
  | 'DeathRegistration'

export interface GQLEventRegistrationNameMap {
  EventRegistration: GQLEventRegistration
  BirthRegistration: GQLBirthRegistration
  DeathRegistration: GQLDeathRegistration
}

export interface GQLRegistrationCountResult {
  results: Array<GQLStatusWiseRegistrationCount | null>
  total: number
}

export interface GQLLocation {
  id: string
  _fhirID?: string
  identifier?: Array<GQLIdentifier | null>
  status?: string
  name?: string
  alias?: Array<string | null>
  description?: string
  partOf?: string
  type?: GQLLocationType
  telecom?: Array<GQLContactPoint | null>
  address?: GQLAddress
  longitude?: number
  latitude?: number
  altitude?: number
  geoData?: string
}

export interface GQLUser {
  id?: string
  userMgntUserID?: string
  practitionerId?: string
  name?: Array<GQLHumanName | null>
  username?: string
  mobile?: string
  role?: string
  type?: string
  email?: string
  status?: string
  underInvestigation?: boolean
  primaryOffice?: GQLLocation
  catchmentArea?: Array<GQLLocation | null>
  localRegistrar?: GQLLocalRegistrar
  identifier?: GQLIdentifier
  signature?: GQLSignature
  creationDate?: string
  avatar?: GQLAvatar
  device?: string
}

export interface GQLSearchUserResult {
  results?: Array<GQLUser | null>
  totalItems?: number
}

export interface GQLSearchFieldAgentResult {
  results?: Array<GQLSearchFieldAgentResponse | null>
  totalItems?: number
}

export interface GQLVerifyPasswordResult {
  mobile?: string
  scrope?: Array<string | null>
  status?: string
  username?: string
  id?: string
}

export interface GQLTotalMetricsResult {
  estimated: GQLEstimation
  results: Array<GQLEventMetrics>
}

export interface GQLTotalVSExport {
  results?: Array<GQLVSEstimation>
}

export interface GQLPaymentMetric {
  total: number
  paymentType: string
}

export interface GQLCertificationMetric {
  total: number
  eventType: string
}

export interface GQLCorrectionMetric {
  total: number
  reason: string
}

export interface GQLLocationStatisticsResponse {
  population?: number
  registrars: number
  offices: number
}

export interface GQLDeclarationsStartedMetrics {
  fieldAgentDeclarations: number
  hospitalDeclarations: number
  officeDeclarations: number
}

export interface GQLMonthWiseEstimationMetric {
  total: number
  withinTarget: number
  within1Year: number
  within5Years: number
  estimated: number
  month: number
  year: number
}

export interface GQLLocationWiseEstimationMetric {
  total: number
  withinTarget: number
  within1Year: number
  within5Years: number
  estimated: number
  locationId: string
  locationName: string
}

export interface GQLTimeLoggedMetricsResultSet {
  results?: Array<GQLTimeLoggedMetrics | null>
  totalItems?: number
}

export interface GQLEventSearchResultSet {
  results?: Array<GQLEventSearchSet | null>
  totalItems?: number
}

export interface GQLEventProgressResultSet {
  results?: Array<GQLEventProgressSet | null>
  totalItems?: number
}

export interface GQLRole {
  id: string
  title?: string
  value?: string
  types?: Array<string | null>
  active?: boolean
}

export interface GQLComparisonInput {
  eq?: string
  gt?: string
  lt?: string
  gte?: string
  lte?: string
  in?: Array<string>
  ne?: string
  nin?: Array<string>
}

export interface GQLCertificateSVG {
  id: string
  svgCode: string
  svgFilename: string
  svgDateUpdated: string
  svgDateCreated: string
  user: string
  event: string
  status: string
}

export interface GQLFormDraft {
  _id: string
  event: GQLEvent
  status: GQLDraftStatus
  comment: string
  version: number
  history: Array<GQLDraftHistory>
  updatedAt: GQLDate
  createdAt: GQLDate
}

export interface GQLNotificationInput {
  child?: GQLPersonInput
  mother?: GQLPersonInput
  father?: GQLPersonInput
  informant?: GQLPersonInput
  location?: GQLLocationInput
  createdAt?: GQLDate
  updatedAt?: GQLDate
}

export interface GQLCreatedIds {
  compositionId?: string
  trackingId?: string
  registrationNumber?: string
}

export interface GQLBirthRegistrationInput {
  _fhirIDMap?: GQLMap
  registration?: GQLRegistrationInput
  child?: GQLPersonInput
  mother?: GQLPersonInput
  father?: GQLPersonInput
  informant?: GQLRelatedPersonInput
  eventLocation?: GQLLocationInput
  birthType?: GQLBirthType
  questionnaire?: Array<GQLQuestionnaireQuestionInput | null>
  weightAtBirth?: number
  attendantAtBirth?: GQLAttendantType
  otherAttendantAtBirth?: string
  birthRegistrationType?: GQLBirthRegType
  childrenBornAliveToMother?: number
  foetalDeathsToMother?: number
  lastPreviousLiveBirth?: GQLDate
  createdAt?: GQLDate
  updatedAt?: GQLDate
}

export interface GQLReinstated {
  taskEntryResourceID: string
  registrationStatus?: GQLRegStatus
}

export interface GQLDeathRegistrationInput {
  _fhirIDMap?: GQLMap
  registration?: GQLRegistrationInput
  deceased?: GQLPersonInput
  informant?: GQLRelatedPersonInput
  mother?: GQLPersonInput
  father?: GQLPersonInput
  spouse?: GQLPersonInput
  eventLocation?: GQLLocationInput
  questionnaire?: Array<GQLQuestionnaireQuestionInput | null>
  mannerOfDeath?: GQLMannerOfDeath
  deathDescription?: string
  causeOfDeathMethod?: GQLCauseOfDeathMethodType
  causeOfDeathEstablished?: string
  causeOfDeath?: string
  maleDependentsOfDeceased?: number
  femaleDependentsOfDeceased?: number
  medicalPractitioner?: GQLMedicalPractitionerInput
  createdAt?: GQLDate
  updatedAt?: GQLDate
}

export interface GQLUserInput {
  id?: string
  name?: Array<GQLHumanNameInput | null>
  identifier?: Array<GQLUserIdentifierInput | null>
  username?: string
  mobile?: string
  role?: string
  type?: string
  email?: string
  primaryOffice?: string
  catchmentArea?: Array<string | null>
  device?: string
  signature?: GQLSignatureInput
}

export interface GQLSecurityQuestionAnswer {
  questionKey?: string
  answer?: string
}

export interface GQLAvatar {
  type: string
  data: string
}

export interface GQLAvatarInput {
  type: string
  data: string
}

export interface GQLCertificateSVGInput {
  id: string
  svgCode: string
  svgFilename: string
  svgDateUpdated?: number
  svgDateCreated?: number
  user: string
  event: string
  status: string
}

export interface GQLApplicationConfiguration {
  APPLICATION_NAME?: string
  BIRTH?: GQLBirth
  COUNTRY_LOGO?: GQLCountryLogo
  CURRENCY?: GQLCurrency
  DEATH?: GQLDeath
  FIELD_AGENT_AUDIT_LOCATIONS?: string
  HIDE_EVENT_REGISTER_INFORMATION?: boolean
  EXTERNAL_VALIDATION_WORKQUEUE?: boolean
  PHONE_NUMBER_PATTERN?: string
  NID_NUMBER_PATTERN?: string
  ADDRESSES?: number
}

export interface GQLApplicationConfigurationInput {
  APPLICATION_NAME?: string
  BIRTH?: GQLBirthInput
  COUNTRY_LOGO?: GQLCountryLogoInput
  CURRENCY?: GQLCurrencyInput
  DEATH?: GQLDeathInput
  FIELD_AGENT_AUDIT_LOCATIONS?: string
  HIDE_EVENT_REGISTER_INFORMATION?: boolean
  EXTERNAL_VALIDATION_WORKQUEUE?: boolean
  PHONE_NUMBER_PATTERN?: string
  NID_NUMBER_PATTERN?: string
  ADDRESSES?: number
}

export interface GQLFormDraftInput {
  questions: Array<GQLQuestionInput>
  event: GQLEvent
  comment: string
}

export interface GQLFormDraftStatusModifyInput {
  event: GQLEvent
  status: GQLDraftStatus
}

export interface GQLDeleteFormDraftInput {
  event: GQLEvent
}

export type GQLMap = any

export interface GQLRegistration {
  id?: string
  _fhirID?: string
  draftId?: string
  trackingId?: string
  registrationNumber?: string
  paperFormID?: string
  page?: string
  book?: string
  informantType?: GQLInformantType
  otherInformantType?: string
  assignment?: GQLAssignmentData
  contact?: string
  contactRelationship?: string
  contactPhoneNumber?: string
  status?: Array<GQLRegWorkflow | null>
  type?: GQLRegistrationType
  inCompleteFields?: string
  attachments?: Array<GQLAttachment | null>
  certificates?: Array<GQLCertificate | null>
  duplicates?: Array<string | null>
}

export interface GQLRelatedPerson {
  id?: string
  _fhirID?: string
  relationship?: string
  otherRelationship?: string
  affidavit?: Array<GQLAttachment | null>
  individual?: GQLPerson
}

export const enum GQLBirthType {
  SINGLE = 'SINGLE',
  TWIN = 'TWIN',
  TRIPLET = 'TRIPLET',
  QUADRUPLET = 'QUADRUPLET',
  HIGHER_MULTIPLE_DELIVERY = 'HIGHER_MULTIPLE_DELIVERY'
}

export interface GQLQuestionnaireQuestion {
  fieldId?: string
  value?: string
}

export const enum GQLAttendantType {
  PHYSICIAN = 'PHYSICIAN',
  NURSE = 'NURSE',
  NURSE_MIDWIFE = 'NURSE_MIDWIFE',
  MIDWIFE = 'MIDWIFE',
  TRADITIONAL_BIRTH_ATTENDANT = 'TRADITIONAL_BIRTH_ATTENDANT',
  OTHER_PARAMEDICAL_PERSONNEL = 'OTHER_PARAMEDICAL_PERSONNEL',
  LAYPERSON = 'LAYPERSON',
  NONE = 'NONE',
  OTHER = 'OTHER'
}

export const enum GQLBirthRegType {
  BOTH_PARENTS = 'BOTH_PARENTS',
  SELF = 'SELF',
  INFORMANT_ONLY = 'INFORMANT_ONLY',
  MOTHER_ONLY = 'MOTHER_ONLY',
  FATHER_ONLY = 'FATHER_ONLY'
}

export interface GQLHistory {
  user?: GQLUser
  date?: GQLDate
  action?: GQLRegStatus
  statusReason?: GQLStatusReason
  reason?: string
  reinstated?: boolean
  location?: GQLLocation
  office?: GQLLocation
  dhis2Notification?: boolean
  comments?: Array<GQLComment | null>
  input?: Array<GQLInputOutput | null>
  output?: Array<GQLInputOutput | null>
  certificates?: Array<GQLCertificate | null>
  signature?: GQLSignature
}

export const enum GQLMannerOfDeath {
  NATURAL_CAUSES = 'NATURAL_CAUSES',
  ACCIDENT = 'ACCIDENT',
  SUICIDE = 'SUICIDE',
  HOMICIDE = 'HOMICIDE',
  MANNER_UNDETERMINED = 'MANNER_UNDETERMINED'
}

export const enum GQLCauseOfDeathMethodType {
  PHYSICIAN = 'PHYSICIAN',
  LAY_REPORTED = 'LAY_REPORTED',
  VERBAL_AUTOPSY = 'VERBAL_AUTOPSY',
  MEDICALLY_CERTIFIED = 'MEDICALLY_CERTIFIED'
}

export interface GQLMedicalPractitioner {
  name?: string
  qualification?: string
  lastVisitDate?: GQLDate
}

export interface GQLIdentityType {
  id?: string
  type?: GQLIdentityIDType
  otherType?: string
}

export interface GQLHumanName {
  use?: string
  firstNames?: string
  familyName?: string
}

export interface GQLContactPoint {
  system?: string
  value?: string
  use?: string
}

export const enum GQLMaritalStatusType {
  SINGLE = 'SINGLE',
  MARRIED = 'MARRIED',
  WIDOWED = 'WIDOWED',
  DIVORCED = 'DIVORCED',
  NOT_STATED = 'NOT_STATED',
  SEPARATED = 'SEPARATED'
}

export interface GQLAddress {
  use?: string
  type?: GQLAddressType
  text?: string
  line?: Array<string | null>
  lineName?: Array<string | null>
  city?: string
  district?: string
  districtName?: string
  state?: string
  stateName?: string
  postalCode?: string
  country?: string
  from?: GQLDate
  to?: GQLDate
}

export interface GQLAttachment {
  id: string
  _fhirID?: string
  contentType?: string
  data?: string
  status?: string
  originalFileName?: string
  systemFileName?: string
  type?: GQLAttachmentType
  description?: string
  subject?: GQLAttachmentSubject
  createdAt?: GQLDate
}

export interface GQLDeceased {
  deceased?: boolean
  deathDate?: string
}

export const enum GQLEducationType {
  NO_SCHOOLING = 'NO_SCHOOLING',
  PRIMARY_ISCED_1 = 'PRIMARY_ISCED_1',
  LOWER_SECONDARY_ISCED_2 = 'LOWER_SECONDARY_ISCED_2',
  UPPER_SECONDARY_ISCED_3 = 'UPPER_SECONDARY_ISCED_3',
  POST_SECONDARY_ISCED_4 = 'POST_SECONDARY_ISCED_4',
  FIRST_STAGE_TERTIARY_ISCED_5 = 'FIRST_STAGE_TERTIARY_ISCED_5',
  SECOND_STAGE_TERTIARY_ISCED_6 = 'SECOND_STAGE_TERTIARY_ISCED_6',
  NOT_STATED = 'NOT_STATED'
}

export interface GQLStatusWiseRegistrationCount {
  status: string
  count: number
}

export interface GQLIdentifier {
  system?: string
  value?: string
}

export const enum GQLLocationType {
  HEALTH_FACILITY = 'HEALTH_FACILITY',
  HOSPITAL = 'HOSPITAL',
  OTHER_HEALTH_INSTITUTION = 'OTHER_HEALTH_INSTITUTION',
  ADMIN_STRUCTURE = 'ADMIN_STRUCTURE',
  CRVS_OFFICE = 'CRVS_OFFICE',
  PRIVATE_HOME = 'PRIVATE_HOME',
  DECEASED_USUAL_RESIDENCE = 'DECEASED_USUAL_RESIDENCE',
  SECONDARY_ADDRESS = 'SECONDARY_ADDRESS',
  PRIMARY_ADDRESS = 'PRIMARY_ADDRESS',
  MILITARY_BASE_OR_CANTONMENT = 'MILITARY_BASE_OR_CANTONMENT',
  IDP_CAMP = 'IDP_CAMP',
  UNHCR_CAMP = 'UNHCR_CAMP',
  OTHER = 'OTHER'
}

export interface GQLLocalRegistrar {
  name: Array<GQLHumanName | null>
  role: string
  signature?: GQLSignature
}

export interface GQLSignature {
  data?: string
  type?: string
}

export interface GQLSearchFieldAgentResponse {
  practitionerId?: string
  fullName?: string
  type?: string
  status?: string
  avatar?: GQLAvatar
  primaryOfficeId?: string
  creationDate?: string
  totalNumberOfDeclarationStarted?: number
  totalNumberOfInProgressAppStarted?: number
  totalNumberOfRejectedDeclarations?: number
  averageTimeForDeclaredDeclarations?: number
}

export interface GQLEstimation {
  totalEstimation: number
  maleEstimation: number
  femaleEstimation: number
  locationId: string
  estimationYear: number
  locationLevel: string
}

export interface GQLEventMetrics {
  total: number
  gender: string
  eventLocationType: string
  timeLabel: string
  practitionerRole: string
}

export interface GQLVSEstimation {
  event?: string
  year?: number
  fileSize?: string
  url?: string
  createdOn?: string
}

export interface GQLTimeLoggedMetrics {
  status: string
  trackingId?: string
  eventType: string
  time: string
}

export interface GQLEventSearchSet {
  id: string
  type?: string
  registration?: GQLRegistrationSearchSet
  operationHistories?: Array<GQLOperationHistorySearchSet | null>
}

/** Use this to resolve interface type EventSearchSet */
export type GQLPossibleEventSearchSetTypeNames =
  | 'BirthEventSearchSet'
  | 'DeathEventSearchSet'

export interface GQLEventSearchSetNameMap {
  EventSearchSet: GQLEventSearchSet
  BirthEventSearchSet: GQLBirthEventSearchSet
  DeathEventSearchSet: GQLDeathEventSearchSet
}

export interface GQLEventProgressSet {
  id: string
  type?: string
  name?: Array<GQLHumanName | null>
  dateOfEvent?: GQLDate
  registration?: GQLRegistrationSearchSet
  startedBy?: GQLUser
  startedByFacility?: string
  startedAt?: GQLDate
  progressReport?: GQLEventProgressData
}

export const enum GQLEvent {
  birth = 'birth',
  death = 'death'
}

export const enum GQLDraftStatus {
  DRAFT = 'DRAFT',
  IN_PREVIEW = 'IN_PREVIEW',
  PUBLISHED = 'PUBLISHED'
}

export interface GQLDraftHistory {
  _id: string
  version: number
  status: GQLDraftStatus
  comment: string
  updatedAt: GQLDate
}

export interface GQLPersonInput {
  _fhirID?: string
  identifier?: Array<GQLIdentityInput | null>
  name?: Array<GQLHumanNameInput | null>
  telecom?: Array<GQLContactPointInput | null>
  gender?: string
  birthDate?: string
  age?: number
  maritalStatus?: GQLMaritalStatusType
  occupation?: string
  detailsExist?: boolean
  reasonNotApplying?: string
  dateOfMarriage?: GQLDate
  multipleBirth?: number
  address?: Array<GQLAddressInput | null>
  photo?: Array<GQLAttachmentInput>
  deceased?: GQLDeceasedInput
  nationality?: Array<string | null>
  educationalAttainment?: GQLEducationType
}

export interface GQLLocationInput {
  _fhirID?: string
  identifier?: Array<string | null>
  status?: string
  name?: string
  alias?: Array<string | null>
  description?: string
  partOf?: string
  type?: GQLLocationType
  telecom?: Array<GQLContactPointInput | null>
  address?: GQLAddressInput
  longitude?: number
  latitude?: number
  altitude?: number
  geoData?: string
}

export interface GQLRegistrationInput {
  _fhirID?: string
  draftId?: string
  trackingId?: string
  registrationNumber?: string
  paperFormID?: string
  page?: string
  book?: string
  informantType?: GQLInformantType
  otherInformantType?: string
  contact?: string
  contactRelationship?: string
  contactPhoneNumber?: string
  status?: Array<GQLRegWorkflowInput | null>
  type?: GQLRegistrationType
  inCompleteFields?: string
  attachments?: Array<GQLAttachmentInput>
  certificates?: Array<GQLCertificateInput | null>
  location?: GQLLocationInput
  correction?: GQLCorrectionInput
}

export interface GQLRelatedPersonInput {
  id?: string
  _fhirID?: string
  relationship?: string
  otherRelationship?: string
  affidavit?: Array<GQLAttachmentInput>
  individual?: GQLPersonInput
}

export interface GQLQuestionnaireQuestionInput {
  fieldId?: string
  value?: string
}

export const enum GQLRegStatus {
  IN_PROGRESS = 'IN_PROGRESS',
  ARCHIVED = 'ARCHIVED',
  DECLARED = 'DECLARED',
  DECLARATION_UPDATED = 'DECLARATION_UPDATED',
  WAITING_VALIDATION = 'WAITING_VALIDATION',
  VALIDATED = 'VALIDATED',
  REGISTERED = 'REGISTERED',
  CERTIFIED = 'CERTIFIED',
  REJECTED = 'REJECTED',
  REQUESTED_CORRECTION = 'REQUESTED_CORRECTION',
  DOWNLOADED = 'DOWNLOADED'
}

export interface GQLMedicalPractitionerInput {
  name?: string
  qualification?: string
  lastVisitDate?: GQLDate
}

export interface GQLHumanNameInput {
  use?: string
  firstNames?: string
  familyName?: string
}

export interface GQLUserIdentifierInput {
  use?: string
  system?: string
  value?: string
}

export interface GQLSignatureInput {
  data: string
  type?: string
}

export interface GQLBirth {
  REGISTRATION_TARGET?: number
  LATE_REGISTRATION_TARGET?: number
  FEE?: GQLBirthFee
}

export interface GQLCountryLogo {
  fileName?: string
  file?: string
}

export interface GQLCurrency {
  isoCode?: string
  languagesAndCountry?: Array<string | null>
}

export interface GQLDeath {
  REGISTRATION_TARGET?: number
  FEE?: GQLDeathFee
}

export interface GQLBirthInput {
  REGISTRATION_TARGET?: number
  LATE_REGISTRATION_TARGET?: number
  FEE?: GQLBirthFeeInput
}

export interface GQLCountryLogoInput {
  fileName?: string
  file?: string
}

export interface GQLCurrencyInput {
  isoCode?: string
  languagesAndCountry?: Array<string | null>
}

export interface GQLDeathInput {
  REGISTRATION_TARGET?: number
  FEE?: GQLDeathFeeInput
}

export interface GQLQuestionInput {
  fieldId: string
  label?: Array<GQLMesssageInput>
  placeholder?: Array<GQLMesssageInput>
  description?: Array<GQLMesssageInput>
  tooltip?: Array<GQLMesssageInput>
  errorMessage?: Array<GQLMesssageInput>
  maxLength?: number
  fieldName?: string
  fieldType?: GQLCustomFieldType
  precedingFieldId: string
  required?: boolean
  enabled?: string
  custom?: boolean
}

export const enum GQLInformantType {
  INFORMANT = 'INFORMANT',
  MOTHER = 'MOTHER',
  FATHER = 'FATHER',
  GRANDFATHER = 'GRANDFATHER',
  GRANDMOTHER = 'GRANDMOTHER',
  BROTHER = 'BROTHER',
  SISTER = 'SISTER',
  OTHER_FAMILY_MEMBER = 'OTHER_FAMILY_MEMBER',
  LEGAL_GUARDIAN = 'LEGAL_GUARDIAN',
  SPOUSE = 'SPOUSE',
  SON = 'SON',
  DAUGHTER = 'DAUGHTER',
  SON_IN_LAW = 'SON_IN_LAW',
  DAUGHTER_IN_LAW = 'DAUGHTER_IN_LAW',
  GRANDSON = 'GRANDSON',
  GRANDDAUGHTER = 'GRANDDAUGHTER',
  OTHER = 'OTHER'
}

export interface GQLAssignmentData {
  userId?: string
  firstName?: string
  lastName?: string
  officeName?: string
}

export interface GQLRegWorkflow {
  id: string
  type?: GQLRegStatus
  user?: GQLUser
  timestamp?: GQLDate
  comments?: Array<GQLComment | null>
  reason?: string
  location?: GQLLocation
  office?: GQLLocation
  timeLogged?: number
}

export const enum GQLRegistrationType {
  BIRTH = 'BIRTH',
  DEATH = 'DEATH'
}

export interface GQLCertificate {
  collector?: GQLRelatedPerson
  hasShowedVerifiedDocument?: boolean
  payments?: Array<GQLPayment | null>
  data?: string
}

export interface GQLStatusReason {
  text?: string
}

export interface GQLComment {
  id: string
  user?: GQLUser
  comment?: string
  createdAt?: GQLDate
}

export interface GQLInputOutput {
  valueCode?: string
  valueId?: string
  valueString?: string
}

export const enum GQLIdentityIDType {
  PASSPORT = 'PASSPORT',
  NATIONAL_ID = 'NATIONAL_ID',
  DRIVING_LICENSE = 'DRIVING_LICENSE',
  BIRTH_REGISTRATION_NUMBER = 'BIRTH_REGISTRATION_NUMBER',
  DEATH_REGISTRATION_NUMBER = 'DEATH_REGISTRATION_NUMBER',
  REFUGEE_NUMBER = 'REFUGEE_NUMBER',
  ALIEN_NUMBER = 'ALIEN_NUMBER',
  OTHER = 'OTHER',
  NO_ID = 'NO_ID',
  SOCIAL_SECURITY_NO = 'SOCIAL_SECURITY_NO'
}

export const enum GQLAddressType {
  HEALTH_FACILITY = 'HEALTH_FACILITY',
  ADMIN_STRUCTURE = 'ADMIN_STRUCTURE',
  CRVS_OFFICE = 'CRVS_OFFICE',
  PRIVATE_HOME = 'PRIVATE_HOME',
  DECEASED_USUAL_RESIDENCE = 'DECEASED_USUAL_RESIDENCE',
  SECONDARY_ADDRESS = 'SECONDARY_ADDRESS',
  PRIMARY_ADDRESS = 'PRIMARY_ADDRESS',
  MILITARY_BASE_OR_CANTONMENT = 'MILITARY_BASE_OR_CANTONMENT',
  IDP_CAMP = 'IDP_CAMP',
  UNHCR_CAMP = 'UNHCR_CAMP',
  OTHER = 'OTHER'
}

export const enum GQLAttachmentType {
  BIRTH_CERTIFICATE = 'BIRTH_CERTIFICATE',
  NATIONAL_ID = 'NATIONAL_ID',
  PASSPORT = 'PASSPORT',
  NOTIFICATION_OF_BIRTH = 'NOTIFICATION_OF_BIRTH',
  PROOF_OF_LEGAL_GUARDIANSHIP = 'PROOF_OF_LEGAL_GUARDIANSHIP',
  PROOF_OF_ASSIGNED_RESPONSIBILITY = 'PROOF_OF_ASSIGNED_RESPONSIBILITY',
  HOSPITAL_CERTIFICATE_OF_DEATH = 'HOSPITAL_CERTIFICATE_OF_DEATH',
  ATTESTED_LETTER_OF_DEATH = 'ATTESTED_LETTER_OF_DEATH',
  BURIAL_RECEIPT = 'BURIAL_RECEIPT',
  POLICE_CERTIFICATE_OF_DEATH = 'POLICE_CERTIFICATE_OF_DEATH',
  MEDICALLY_CERTIFIED_CAUSE_OF_DEATH = 'MEDICALLY_CERTIFIED_CAUSE_OF_DEATH',
  VERBAL_AUTOPSY_REPORT = 'VERBAL_AUTOPSY_REPORT',
  CORONERS_REPORT = 'CORONERS_REPORT',
  OTHER = 'OTHER'
}

export const enum GQLAttachmentSubject {
  MOTHER = 'MOTHER',
  FATHER = 'FATHER',
  CHILD = 'CHILD',
  OTHER = 'OTHER',
  PARENT = 'PARENT',
  CHILD_AGE = 'CHILD_AGE',
  DECEASED_ID_PROOF = 'DECEASED_ID_PROOF',
  DECEASED_DEATH_PROOF = 'DECEASED_DEATH_PROOF',
  DECEASED_DEATH_CAUSE_PROOF = 'DECEASED_DEATH_CAUSE_PROOF',
  INFORMANT_ID_PROOF = 'INFORMANT_ID_PROOF',
  LEGAL_GUARDIAN_PROOF = 'LEGAL_GUARDIAN_PROOF'
}

export interface GQLRegistrationSearchSet {
  status?: string
  contactNumber?: string
  contactRelationship?: string
  dateOfDeclaration?: GQLDate
  trackingId?: string
  registrationNumber?: string
  eventLocationId?: string
  registeredLocationId?: string
  reason?: string
  comment?: string
  duplicates?: Array<string | null>
  createdAt?: string
  modifiedAt?: string
  assignment?: GQLAssignmentData
}

export interface GQLOperationHistorySearchSet {
  operationType?: string
  operatedOn?: GQLDate
  operatorRole?: string
  operatorName?: Array<GQLHumanName | null>
  operatorOfficeName?: string
  operatorOfficeAlias?: Array<string | null>
  notificationFacilityName?: string
  notificationFacilityAlias?: Array<string | null>
  rejectReason?: string
  rejectComment?: string
}

export interface GQLBirthEventSearchSet extends GQLEventSearchSet {
  id: string
  type?: string
  childName?: Array<GQLHumanName | null>
  dateOfBirth?: GQLDate
  registration?: GQLRegistrationSearchSet
  operationHistories?: Array<GQLOperationHistorySearchSet | null>
}

export interface GQLDeathEventSearchSet extends GQLEventSearchSet {
  id: string
  type?: string
  deceasedName?: Array<GQLHumanName | null>
  dateOfDeath?: GQLDate
  registration?: GQLRegistrationSearchSet
  operationHistories?: Array<GQLOperationHistorySearchSet | null>
}

export interface GQLEventProgressData {
  timeInProgress?: number
  timeInReadyForReview?: number
  timeInRequiresUpdates?: number
  timeInWaitingForApproval?: number
  timeInWaitingForBRIS?: number
  timeInReadyToPrint?: number
}

export interface GQLIdentityInput {
  id?: string
  type?: GQLIdentityIDType
  otherType?: string
}

export interface GQLContactPointInput {
  system?: string
  value?: string
  use?: string
}

export interface GQLAddressInput {
  use?: string
  type?: GQLAddressType
  text?: string
  line?: Array<string | null>
  city?: string
  district?: string
  state?: string
  postalCode?: string
  country?: string
  from?: GQLDate
  to?: GQLDate
}

export interface GQLAttachmentInput {
  _fhirID?: string
  contentType?: string
  data: string
  status?: string
  originalFileName?: string
  systemFileName?: string
  type?: GQLAttachmentType
  description?: string
  subject?: GQLAttachmentSubject
  createdAt?: GQLDate
}

export interface GQLDeceasedInput {
  deceased?: boolean
  deathDate?: string
}

export interface GQLRegWorkflowInput {
  type?: GQLRegStatus
  user?: GQLUserInput
  timestamp?: GQLDate
  reason?: string
  comments?: Array<GQLCommentInput | null>
  location?: GQLLocationInput
  timeLoggedMS?: number
}

export interface GQLCertificateInput {
  collector?: GQLRelatedPersonInput
  hasShowedVerifiedDocument?: boolean
  payments?: Array<GQLPaymentInput | null>
  data?: string
}

export interface GQLCorrectionInput {
  requester?: string
  hasShowedVerifiedDocument?: boolean
  attestedAndCopied?: boolean
  noSupportingDocumentationRequired?: boolean
  payments?: Array<GQLPaymentInput | null>
  values?: Array<GQLCorrectionValueInput | null>
  location?: GQLLocationInput
  data?: string
  reason?: string
  note?: string
}

export interface GQLBirthFee {
  ON_TIME?: number
  LATE?: number
  DELAYED?: number
}

export interface GQLDeathFee {
  ON_TIME?: number
  DELAYED?: number
}

export interface GQLBirthFeeInput {
  ON_TIME?: number
  LATE?: number
  DELAYED?: number
}

export interface GQLDeathFeeInput {
  ON_TIME?: number
  DELAYED?: number
}

export interface GQLMesssageInput {
  lang: string
  descriptor: GQLMesssageDescriptorInput
}

export const enum GQLCustomFieldType {
  TEXT = 'TEXT',
  TEL = 'TEL',
  TEXTAREA = 'TEXTAREA',
  NUMBER = 'NUMBER',
  SUBSECTION = 'SUBSECTION',
  PARAGRAPH = 'PARAGRAPH'
}

export interface GQLPayment {
  paymentId?: string
  type?: GQLPaymentType
  total?: number
  amount?: number
  outcome?: GQLPaymentOutcomeType
  date?: GQLDate
}

export interface GQLCommentInput {
  user?: GQLUserInput
  comment?: string
  createdAt?: GQLDate
}

export interface GQLPaymentInput {
  paymentId?: string
  type?: GQLPaymentType
  total?: number
  amount?: number
  outcome?: GQLPaymentOutcomeType
  date?: GQLDate
  data?: string
}

export interface GQLCorrectionValueInput {
  section?: string
  fieldName?: string
  oldValue?: string
  newValue?: string
}

export interface GQLMesssageDescriptorInput {
  id: string
  description?: string
  defaultMessage: string
}

export const enum GQLPaymentType {
  MANUAL = 'MANUAL'
}

export const enum GQLPaymentOutcomeType {
  COMPLETED = 'COMPLETED',
  ERROR = 'ERROR',
  PARTIAL = 'PARTIAL'
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver
  Mutation?: GQLMutationTypeResolver
  Dummy?: GQLDummyTypeResolver
  Notification?: GQLNotificationTypeResolver
  Date?: GraphQLScalarType
  BirthRegistration?: GQLBirthRegistrationTypeResolver
  DeathRegistration?: GQLDeathRegistrationTypeResolver
  Person?: GQLPersonTypeResolver
  BirthRegResultSet?: GQLBirthRegResultSetTypeResolver
  EventRegistration?: {
    __resolveType: GQLEventRegistrationTypeResolver
  }

  RegistrationCountResult?: GQLRegistrationCountResultTypeResolver
  Location?: GQLLocationTypeResolver
  User?: GQLUserTypeResolver
  SearchUserResult?: GQLSearchUserResultTypeResolver
  SearchFieldAgentResult?: GQLSearchFieldAgentResultTypeResolver
  VerifyPasswordResult?: GQLVerifyPasswordResultTypeResolver
  TotalMetricsResult?: GQLTotalMetricsResultTypeResolver
  TotalVSExport?: GQLTotalVSExportTypeResolver
  PaymentMetric?: GQLPaymentMetricTypeResolver
  CertificationMetric?: GQLCertificationMetricTypeResolver
  CorrectionMetric?: GQLCorrectionMetricTypeResolver
  LocationStatisticsResponse?: GQLLocationStatisticsResponseTypeResolver
  DeclarationsStartedMetrics?: GQLDeclarationsStartedMetricsTypeResolver
  MonthWiseEstimationMetric?: GQLMonthWiseEstimationMetricTypeResolver
  LocationWiseEstimationMetric?: GQLLocationWiseEstimationMetricTypeResolver
  TimeLoggedMetricsResultSet?: GQLTimeLoggedMetricsResultSetTypeResolver
  EventSearchResultSet?: GQLEventSearchResultSetTypeResolver
  EventProgressResultSet?: GQLEventProgressResultSetTypeResolver
  Role?: GQLRoleTypeResolver
  CertificateSVG?: GQLCertificateSVGTypeResolver
  FormDraft?: GQLFormDraftTypeResolver
  CreatedIds?: GQLCreatedIdsTypeResolver
  Reinstated?: GQLReinstatedTypeResolver
  Avatar?: GQLAvatarTypeResolver
  ApplicationConfiguration?: GQLApplicationConfigurationTypeResolver
  Map?: GraphQLScalarType
  Registration?: GQLRegistrationTypeResolver
  RelatedPerson?: GQLRelatedPersonTypeResolver
  QuestionnaireQuestion?: GQLQuestionnaireQuestionTypeResolver
  History?: GQLHistoryTypeResolver
  MedicalPractitioner?: GQLMedicalPractitionerTypeResolver
  IdentityType?: GQLIdentityTypeTypeResolver
  HumanName?: GQLHumanNameTypeResolver
  ContactPoint?: GQLContactPointTypeResolver
  Address?: GQLAddressTypeResolver
  Attachment?: GQLAttachmentTypeResolver
  Deceased?: GQLDeceasedTypeResolver
  StatusWiseRegistrationCount?: GQLStatusWiseRegistrationCountTypeResolver
  Identifier?: GQLIdentifierTypeResolver
  LocalRegistrar?: GQLLocalRegistrarTypeResolver
  Signature?: GQLSignatureTypeResolver
  SearchFieldAgentResponse?: GQLSearchFieldAgentResponseTypeResolver
  Estimation?: GQLEstimationTypeResolver
  EventMetrics?: GQLEventMetricsTypeResolver
  VSEstimation?: GQLVSEstimationTypeResolver
  TimeLoggedMetrics?: GQLTimeLoggedMetricsTypeResolver
  EventSearchSet?: {
    __resolveType: GQLEventSearchSetTypeResolver
  }

  EventProgressSet?: GQLEventProgressSetTypeResolver
  DraftHistory?: GQLDraftHistoryTypeResolver
  Birth?: GQLBirthTypeResolver
  CountryLogo?: GQLCountryLogoTypeResolver
  Currency?: GQLCurrencyTypeResolver
  Death?: GQLDeathTypeResolver
  AssignmentData?: GQLAssignmentDataTypeResolver
  RegWorkflow?: GQLRegWorkflowTypeResolver
  Certificate?: GQLCertificateTypeResolver
  StatusReason?: GQLStatusReasonTypeResolver
  Comment?: GQLCommentTypeResolver
  InputOutput?: GQLInputOutputTypeResolver
  RegistrationSearchSet?: GQLRegistrationSearchSetTypeResolver
  OperationHistorySearchSet?: GQLOperationHistorySearchSetTypeResolver
  BirthEventSearchSet?: GQLBirthEventSearchSetTypeResolver
  DeathEventSearchSet?: GQLDeathEventSearchSetTypeResolver
  EventProgressData?: GQLEventProgressDataTypeResolver
  BirthFee?: GQLBirthFeeTypeResolver
  DeathFee?: GQLDeathFeeTypeResolver
  Payment?: GQLPaymentTypeResolver
}
export interface GQLQueryTypeResolver<TParent = any> {
  listNotifications?: QueryToListNotificationsResolver<TParent>
  fetchBirthRegistration?: QueryToFetchBirthRegistrationResolver<TParent>
  searchBirthRegistrations?: QueryToSearchBirthRegistrationsResolver<TParent>
  searchDeathRegistrations?: QueryToSearchDeathRegistrationsResolver<TParent>
  queryRegistrationByIdentifier?: QueryToQueryRegistrationByIdentifierResolver<TParent>
  queryPersonByIdentifier?: QueryToQueryPersonByIdentifierResolver<TParent>
  listBirthRegistrations?: QueryToListBirthRegistrationsResolver<TParent>
  fetchDeathRegistration?: QueryToFetchDeathRegistrationResolver<TParent>
  fetchEventRegistration?: QueryToFetchEventRegistrationResolver<TParent>
  fetchRegistration?: QueryToFetchRegistrationResolver<TParent>
  queryPersonByNidIdentifier?: QueryToQueryPersonByNidIdentifierResolver<TParent>
  fetchRegistrationCountByStatus?: QueryToFetchRegistrationCountByStatusResolver<TParent>
  locationsByParent?: QueryToLocationsByParentResolver<TParent>
  locationById?: QueryToLocationByIdResolver<TParent>
  hasChildLocation?: QueryToHasChildLocationResolver<TParent>
  getUser?: QueryToGetUserResolver<TParent>
  getUserByMobile?: QueryToGetUserByMobileResolver<TParent>
  searchUsers?: QueryToSearchUsersResolver<TParent>
  searchFieldAgents?: QueryToSearchFieldAgentsResolver<TParent>
  verifyPasswordById?: QueryToVerifyPasswordByIdResolver<TParent>
  getTotalMetrics?: QueryToGetTotalMetricsResolver<TParent>
  getTotalVSExport?: QueryToGetTotalVSExportResolver<TParent>
  getTotalPayments?: QueryToGetTotalPaymentsResolver<TParent>
  getTotalCertifications?: QueryToGetTotalCertificationsResolver<TParent>
  getTotalCorrections?: QueryToGetTotalCorrectionsResolver<TParent>
  getLocationStatistics?: QueryToGetLocationStatisticsResolver<TParent>
  getDeclarationsStartedMetrics?: QueryToGetDeclarationsStartedMetricsResolver<TParent>
  fetchMonthWiseEventMetrics?: QueryToFetchMonthWiseEventMetricsResolver<TParent>
  fetchLocationWiseEventMetrics?: QueryToFetchLocationWiseEventMetricsResolver<TParent>
  fetchTimeLoggedMetricsByPractitioner?: QueryToFetchTimeLoggedMetricsByPractitionerResolver<TParent>
  searchEvents?: QueryToSearchEventsResolver<TParent>
  getEventsWithProgress?: QueryToGetEventsWithProgressResolver<TParent>
  getRoles?: QueryToGetRolesResolver<TParent>
  getCertificateSVG?: QueryToGetCertificateSVGResolver<TParent>
  getActiveCertificatesSVG?: QueryToGetActiveCertificatesSVGResolver<TParent>
  getFormDraft?: QueryToGetFormDraftResolver<TParent>
}

export interface QueryToListNotificationsArgs {
  locationIds?: Array<string | null>
  status?: string
  userId?: string
  from?: GQLDate
  to?: GQLDate
}
export interface QueryToListNotificationsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListNotificationsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchBirthRegistrationArgs {
  id: string
}
export interface QueryToFetchBirthRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToFetchBirthRegistrationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToSearchBirthRegistrationsArgs {
  fromDate?: GQLDate
  toDate?: GQLDate
}
export interface QueryToSearchBirthRegistrationsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToSearchBirthRegistrationsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToSearchDeathRegistrationsArgs {
  fromDate?: GQLDate
  toDate?: GQLDate
}
export interface QueryToSearchDeathRegistrationsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToSearchDeathRegistrationsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToQueryRegistrationByIdentifierArgs {
  identifier: string
}
export interface QueryToQueryRegistrationByIdentifierResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToQueryRegistrationByIdentifierArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToQueryPersonByIdentifierArgs {
  identifier: string
}
export interface QueryToQueryPersonByIdentifierResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToQueryPersonByIdentifierArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToListBirthRegistrationsArgs {
  locationIds?: Array<string | null>
  status?: string
  userId?: string
  from?: GQLDate
  to?: GQLDate
  count?: number
  skip?: number
}
export interface QueryToListBirthRegistrationsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListBirthRegistrationsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchDeathRegistrationArgs {
  id: string
}
export interface QueryToFetchDeathRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToFetchDeathRegistrationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchEventRegistrationArgs {
  id: string
}
export interface QueryToFetchEventRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToFetchEventRegistrationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchRegistrationArgs {
  id: string
}
export interface QueryToFetchRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToFetchRegistrationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToQueryPersonByNidIdentifierArgs {
  dob?: string
  nid?: string
  country?: string
}
export interface QueryToQueryPersonByNidIdentifierResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToQueryPersonByNidIdentifierArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchRegistrationCountByStatusArgs {
  status: Array<string | null>
  locationId?: string
  event?: string
}
export interface QueryToFetchRegistrationCountByStatusResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToFetchRegistrationCountByStatusArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToLocationsByParentArgs {
  parentId?: string
  type?: string
}
export interface QueryToLocationsByParentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToLocationsByParentArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToLocationByIdArgs {
  locationId?: string
}
export interface QueryToLocationByIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToLocationByIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToHasChildLocationArgs {
  parentId?: string
}
export interface QueryToHasChildLocationResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToHasChildLocationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetUserArgs {
  userId?: string
}
export interface QueryToGetUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToGetUserArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetUserByMobileArgs {
  mobile?: string
}
export interface QueryToGetUserByMobileResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToGetUserByMobileArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToSearchUsersArgs {
  username?: string
  mobile?: string
  status?: string
  role?: string
  primaryOfficeId?: string
  locationId?: string
  count?: number
  skip?: number
  sort?: string
}
export interface QueryToSearchUsersResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToSearchUsersArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToSearchFieldAgentsArgs {
  locationId?: string
  primaryOfficeId?: string
  status?: string
  language?: string
  timeStart: string
  timeEnd: string
  event?: string
  count?: number
  skip?: number
  sort?: string
}
export interface QueryToSearchFieldAgentsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToSearchFieldAgentsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToVerifyPasswordByIdArgs {
  id: string
  password: string
}
export interface QueryToVerifyPasswordByIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToVerifyPasswordByIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetTotalMetricsArgs {
  timeStart: string
  timeEnd: string
  locationId?: string
  event: string
}
export interface QueryToGetTotalMetricsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToGetTotalMetricsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetTotalVSExportResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface QueryToGetTotalPaymentsArgs {
  timeStart: string
  timeEnd: string
  locationId?: string
  event: string
}
export interface QueryToGetTotalPaymentsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToGetTotalPaymentsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetTotalCertificationsArgs {
  timeStart: string
  timeEnd: string
  locationId?: string
}
export interface QueryToGetTotalCertificationsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToGetTotalCertificationsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetTotalCorrectionsArgs {
  timeStart: string
  timeEnd: string
  locationId?: string
  event: string
}
export interface QueryToGetTotalCorrectionsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToGetTotalCorrectionsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetLocationStatisticsArgs {
  locationId?: string
  populationYear: number
}
export interface QueryToGetLocationStatisticsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToGetLocationStatisticsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetDeclarationsStartedMetricsArgs {
  timeStart: string
  timeEnd: string
  locationId: string
}
export interface QueryToGetDeclarationsStartedMetricsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToGetDeclarationsStartedMetricsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchMonthWiseEventMetricsArgs {
  timeStart: string
  timeEnd: string
  locationId?: string
  event: string
}
export interface QueryToFetchMonthWiseEventMetricsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToFetchMonthWiseEventMetricsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchLocationWiseEventMetricsArgs {
  timeStart: string
  timeEnd: string
  locationId?: string
  event: string
}
export interface QueryToFetchLocationWiseEventMetricsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToFetchLocationWiseEventMetricsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchTimeLoggedMetricsByPractitionerArgs {
  timeStart: string
  timeEnd: string
  practitionerId: string
  locationId: string
  count: number
}
export interface QueryToFetchTimeLoggedMetricsByPractitionerResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToFetchTimeLoggedMetricsByPractitionerArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToSearchEventsArgs {
  userId?: string
  locationIds?: Array<string>
  status?: Array<string | null>
  type?: Array<string | null>
  trackingId?: string
  registrationNumber?: string
  contactNumber?: string
  name?: string
  count?: number
  skip?: number
  sort?: string
  sortColumn?: string
}
export interface QueryToSearchEventsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToSearchEventsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetEventsWithProgressArgs {
  locationId?: string
  count?: number
  skip?: number
  sort?: string
  status?: Array<string | null>
  type?: Array<string | null>
}
export interface QueryToGetEventsWithProgressResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToGetEventsWithProgressArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetRolesArgs {
  title?: string
  value?: GQLComparisonInput
  type?: string
  active?: boolean
  sortBy?: string
  sortOrder?: string
}
export interface QueryToGetRolesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToGetRolesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetCertificateSVGArgs {
  status?: string
  event?: string
}
export interface QueryToGetCertificateSVGResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToGetCertificateSVGArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetActiveCertificatesSVGResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface QueryToGetFormDraftResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLMutationTypeResolver<TParent = any> {
  createNotification?: MutationToCreateNotificationResolver<TParent>
  voidNotification?: MutationToVoidNotificationResolver<TParent>
  createBirthRegistration?: MutationToCreateBirthRegistrationResolver<TParent>
  updateBirthRegistration?: MutationToUpdateBirthRegistrationResolver<TParent>
  markBirthAsVerified?: MutationToMarkBirthAsVerifiedResolver<TParent>
  markBirthAsValidated?: MutationToMarkBirthAsValidatedResolver<TParent>
  markBirthAsRegistered?: MutationToMarkBirthAsRegisteredResolver<TParent>
  markBirthAsCertified?: MutationToMarkBirthAsCertifiedResolver<TParent>
  requestBirthRegistrationCorrection?: MutationToRequestBirthRegistrationCorrectionResolver<TParent>
  markEventAsVoided?: MutationToMarkEventAsVoidedResolver<TParent>
  markEventAsReinstated?: MutationToMarkEventAsReinstatedResolver<TParent>
  markEventAsArchived?: MutationToMarkEventAsArchivedResolver<TParent>
  notADuplicate?: MutationToNotADuplicateResolver<TParent>
  createDeathRegistration?: MutationToCreateDeathRegistrationResolver<TParent>
  updateDeathRegistration?: MutationToUpdateDeathRegistrationResolver<TParent>
  markDeathAsVerified?: MutationToMarkDeathAsVerifiedResolver<TParent>
  markDeathAsValidated?: MutationToMarkDeathAsValidatedResolver<TParent>
  markDeathAsRegistered?: MutationToMarkDeathAsRegisteredResolver<TParent>
  markDeathAsCertified?: MutationToMarkDeathAsCertifiedResolver<TParent>
  requestDeathRegistrationCorrection?: MutationToRequestDeathRegistrationCorrectionResolver<TParent>
  markEventAsUnassigned?: MutationToMarkEventAsUnassignedResolver<TParent>
  createOrUpdateUser?: MutationToCreateOrUpdateUserResolver<TParent>
  activateUser?: MutationToActivateUserResolver<TParent>
  changePassword?: MutationToChangePasswordResolver<TParent>
  changePhone?: MutationToChangePhoneResolver<TParent>
  changeAvatar?: MutationToChangeAvatarResolver<TParent>
  auditUser?: MutationToAuditUserResolver<TParent>
  resendSMSInvite?: MutationToResendSMSInviteResolver<TParent>
  createOrUpdateCertificateSVG?: MutationToCreateOrUpdateCertificateSVGResolver<TParent>
  updateApplicationConfig?: MutationToUpdateApplicationConfigResolver<TParent>
  createFormDraft?: MutationToCreateFormDraftResolver<TParent>
  modifyDraftStatus?: MutationToModifyDraftStatusResolver<TParent>
  deleteFormDraft?: MutationToDeleteFormDraftResolver<TParent>
}

export interface MutationToCreateNotificationArgs {
  details: GQLNotificationInput
}
export interface MutationToCreateNotificationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateNotificationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToVoidNotificationArgs {
  id: string
}
export interface MutationToVoidNotificationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToVoidNotificationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToCreateBirthRegistrationArgs {
  details: GQLBirthRegistrationInput
}
export interface MutationToCreateBirthRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateBirthRegistrationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUpdateBirthRegistrationArgs {
  id: string
  details: GQLBirthRegistrationInput
}
export interface MutationToUpdateBirthRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateBirthRegistrationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkBirthAsVerifiedArgs {
  id: string
  details?: GQLBirthRegistrationInput
}
export interface MutationToMarkBirthAsVerifiedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkBirthAsVerifiedArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkBirthAsValidatedArgs {
  id: string
  details?: GQLBirthRegistrationInput
}
export interface MutationToMarkBirthAsValidatedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkBirthAsValidatedArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkBirthAsRegisteredArgs {
  id: string
  details: GQLBirthRegistrationInput
}
export interface MutationToMarkBirthAsRegisteredResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkBirthAsRegisteredArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkBirthAsCertifiedArgs {
  id: string
  details: GQLBirthRegistrationInput
}
export interface MutationToMarkBirthAsCertifiedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkBirthAsCertifiedArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToRequestBirthRegistrationCorrectionArgs {
  id: string
  details: GQLBirthRegistrationInput
}
export interface MutationToRequestBirthRegistrationCorrectionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToRequestBirthRegistrationCorrectionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkEventAsVoidedArgs {
  id: string
  reason: string
  comment?: string
}
export interface MutationToMarkEventAsVoidedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkEventAsVoidedArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkEventAsReinstatedArgs {
  id: string
}
export interface MutationToMarkEventAsReinstatedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkEventAsReinstatedArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkEventAsArchivedArgs {
  id: string
}
export interface MutationToMarkEventAsArchivedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkEventAsArchivedArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToNotADuplicateArgs {
  id: string
  duplicateId: string
}
export interface MutationToNotADuplicateResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToNotADuplicateArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToCreateDeathRegistrationArgs {
  details: GQLDeathRegistrationInput
}
export interface MutationToCreateDeathRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateDeathRegistrationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUpdateDeathRegistrationArgs {
  id: string
  details: GQLDeathRegistrationInput
}
export interface MutationToUpdateDeathRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateDeathRegistrationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkDeathAsVerifiedArgs {
  id: string
  details?: GQLDeathRegistrationInput
}
export interface MutationToMarkDeathAsVerifiedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkDeathAsVerifiedArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkDeathAsValidatedArgs {
  id: string
  details?: GQLDeathRegistrationInput
}
export interface MutationToMarkDeathAsValidatedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkDeathAsValidatedArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkDeathAsRegisteredArgs {
  id: string
  details: GQLDeathRegistrationInput
}
export interface MutationToMarkDeathAsRegisteredResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkDeathAsRegisteredArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkDeathAsCertifiedArgs {
  id: string
  details: GQLDeathRegistrationInput
}
export interface MutationToMarkDeathAsCertifiedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkDeathAsCertifiedArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToRequestDeathRegistrationCorrectionArgs {
  id: string
  details: GQLDeathRegistrationInput
}
export interface MutationToRequestDeathRegistrationCorrectionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToRequestDeathRegistrationCorrectionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkEventAsUnassignedArgs {
  id: string
}
export interface MutationToMarkEventAsUnassignedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkEventAsUnassignedArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToCreateOrUpdateUserArgs {
  user: GQLUserInput
}
export interface MutationToCreateOrUpdateUserResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateOrUpdateUserArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToActivateUserArgs {
  userId: string
  password: string
  securityQNAs: Array<GQLSecurityQuestionAnswer | null>
}
export interface MutationToActivateUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToActivateUserArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToChangePasswordArgs {
  userId: string
  existingPassword: string
  password: string
}
export interface MutationToChangePasswordResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToChangePasswordArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToChangePhoneArgs {
  userId: string
  phoneNumber: string
  nonce: string
  verifyCode: string
}
export interface MutationToChangePhoneResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToChangePhoneArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToChangeAvatarArgs {
  userId: string
  avatar: GQLAvatarInput
}
export interface MutationToChangeAvatarResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToChangeAvatarArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToAuditUserArgs {
  userId: string
  action: string
  reason: string
  comment?: string
}
export interface MutationToAuditUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToAuditUserArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToResendSMSInviteArgs {
  userId: string
}
export interface MutationToResendSMSInviteResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToResendSMSInviteArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToCreateOrUpdateCertificateSVGArgs {
  certificateSVG: GQLCertificateSVGInput
}
export interface MutationToCreateOrUpdateCertificateSVGResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateOrUpdateCertificateSVGArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUpdateApplicationConfigArgs {
  applicationConfig?: GQLApplicationConfigurationInput
}
export interface MutationToUpdateApplicationConfigResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateApplicationConfigArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToCreateFormDraftArgs {
  formDraft: GQLFormDraftInput
}
export interface MutationToCreateFormDraftResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateFormDraftArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToModifyDraftStatusArgs {
  formDraft: GQLFormDraftStatusModifyInput
}
export interface MutationToModifyDraftStatusResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToModifyDraftStatusArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToDeleteFormDraftArgs {
  formDraft: GQLDeleteFormDraftInput
}
export interface MutationToDeleteFormDraftResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteFormDraftArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLDummyTypeResolver<TParent = any> {
  dummy?: DummyToDummyResolver<TParent>
}

export interface DummyToDummyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLNotificationTypeResolver<TParent = any> {
  id?: NotificationToIdResolver<TParent>
  child?: NotificationToChildResolver<TParent>
  mother?: NotificationToMotherResolver<TParent>
  father?: NotificationToFatherResolver<TParent>
  informant?: NotificationToInformantResolver<TParent>
  location?: NotificationToLocationResolver<TParent>
  createdAt?: NotificationToCreatedAtResolver<TParent>
  updatedAt?: NotificationToUpdatedAtResolver<TParent>
}

export interface NotificationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationToChildResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationToMotherResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationToFatherResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationToInformantResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationToLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLBirthRegistrationTypeResolver<TParent = any> {
  id?: BirthRegistrationToIdResolver<TParent>
  _fhirIDMap?: BirthRegistrationTo_fhirIDMapResolver<TParent>
  registration?: BirthRegistrationToRegistrationResolver<TParent>
  child?: BirthRegistrationToChildResolver<TParent>
  mother?: BirthRegistrationToMotherResolver<TParent>
  father?: BirthRegistrationToFatherResolver<TParent>
  informant?: BirthRegistrationToInformantResolver<TParent>
  eventLocation?: BirthRegistrationToEventLocationResolver<TParent>
  birthType?: BirthRegistrationToBirthTypeResolver<TParent>
  questionnaire?: BirthRegistrationToQuestionnaireResolver<TParent>
  weightAtBirth?: BirthRegistrationToWeightAtBirthResolver<TParent>
  attendantAtBirth?: BirthRegistrationToAttendantAtBirthResolver<TParent>
  otherAttendantAtBirth?: BirthRegistrationToOtherAttendantAtBirthResolver<TParent>
  birthRegistrationType?: BirthRegistrationToBirthRegistrationTypeResolver<TParent>
  childrenBornAliveToMother?: BirthRegistrationToChildrenBornAliveToMotherResolver<TParent>
  foetalDeathsToMother?: BirthRegistrationToFoetalDeathsToMotherResolver<TParent>
  lastPreviousLiveBirth?: BirthRegistrationToLastPreviousLiveBirthResolver<TParent>
  createdAt?: BirthRegistrationToCreatedAtResolver<TParent>
  updatedAt?: BirthRegistrationToUpdatedAtResolver<TParent>
  history?: BirthRegistrationToHistoryResolver<TParent>
}

export interface BirthRegistrationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationTo_fhirIDMapResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToChildResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToMotherResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToFatherResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToInformantResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToEventLocationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToBirthTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToQuestionnaireResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToWeightAtBirthResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToAttendantAtBirthResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToOtherAttendantAtBirthResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToBirthRegistrationTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToChildrenBornAliveToMotherResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToFoetalDeathsToMotherResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToLastPreviousLiveBirthResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToHistoryResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLDeathRegistrationTypeResolver<TParent = any> {
  id?: DeathRegistrationToIdResolver<TParent>
  _fhirIDMap?: DeathRegistrationTo_fhirIDMapResolver<TParent>
  registration?: DeathRegistrationToRegistrationResolver<TParent>
  deceased?: DeathRegistrationToDeceasedResolver<TParent>
  informant?: DeathRegistrationToInformantResolver<TParent>
  mother?: DeathRegistrationToMotherResolver<TParent>
  father?: DeathRegistrationToFatherResolver<TParent>
  spouse?: DeathRegistrationToSpouseResolver<TParent>
  eventLocation?: DeathRegistrationToEventLocationResolver<TParent>
  questionnaire?: DeathRegistrationToQuestionnaireResolver<TParent>
  mannerOfDeath?: DeathRegistrationToMannerOfDeathResolver<TParent>
  deathDescription?: DeathRegistrationToDeathDescriptionResolver<TParent>
  causeOfDeathMethod?: DeathRegistrationToCauseOfDeathMethodResolver<TParent>
  causeOfDeathEstablished?: DeathRegistrationToCauseOfDeathEstablishedResolver<TParent>
  causeOfDeath?: DeathRegistrationToCauseOfDeathResolver<TParent>
  maleDependentsOfDeceased?: DeathRegistrationToMaleDependentsOfDeceasedResolver<TParent>
  femaleDependentsOfDeceased?: DeathRegistrationToFemaleDependentsOfDeceasedResolver<TParent>
  medicalPractitioner?: DeathRegistrationToMedicalPractitionerResolver<TParent>
  createdAt?: DeathRegistrationToCreatedAtResolver<TParent>
  updatedAt?: DeathRegistrationToUpdatedAtResolver<TParent>
  history?: DeathRegistrationToHistoryResolver<TParent>
}

export interface DeathRegistrationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationTo_fhirIDMapResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToDeceasedResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToInformantResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToMotherResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToFatherResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToSpouseResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToEventLocationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToQuestionnaireResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToMannerOfDeathResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToDeathDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToCauseOfDeathMethodResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToCauseOfDeathEstablishedResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToCauseOfDeathResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToMaleDependentsOfDeceasedResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToFemaleDependentsOfDeceasedResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToMedicalPractitionerResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToHistoryResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLPersonTypeResolver<TParent = any> {
  id?: PersonToIdResolver<TParent>
  _fhirID?: PersonTo_fhirIDResolver<TParent>
  identifier?: PersonToIdentifierResolver<TParent>
  name?: PersonToNameResolver<TParent>
  telecom?: PersonToTelecomResolver<TParent>
  gender?: PersonToGenderResolver<TParent>
  birthDate?: PersonToBirthDateResolver<TParent>
  age?: PersonToAgeResolver<TParent>
  maritalStatus?: PersonToMaritalStatusResolver<TParent>
  occupation?: PersonToOccupationResolver<TParent>
  detailsExist?: PersonToDetailsExistResolver<TParent>
  reasonNotApplying?: PersonToReasonNotApplyingResolver<TParent>
  dateOfMarriage?: PersonToDateOfMarriageResolver<TParent>
  multipleBirth?: PersonToMultipleBirthResolver<TParent>
  address?: PersonToAddressResolver<TParent>
  photo?: PersonToPhotoResolver<TParent>
  deceased?: PersonToDeceasedResolver<TParent>
  nationality?: PersonToNationalityResolver<TParent>
  educationalAttainment?: PersonToEducationalAttainmentResolver<TParent>
}

export interface PersonToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonTo_fhirIDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToIdentifierResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToTelecomResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToGenderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToBirthDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToAgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToMaritalStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToOccupationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToDetailsExistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToReasonNotApplyingResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToDateOfMarriageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToMultipleBirthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToPhotoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToDeceasedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToNationalityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToEducationalAttainmentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLBirthRegResultSetTypeResolver<TParent = any> {
  results?: BirthRegResultSetToResultsResolver<TParent>
  totalItems?: BirthRegResultSetToTotalItemsResolver<TParent>
}

export interface BirthRegResultSetToResultsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegResultSetToTotalItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLEventRegistrationTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo):
    | 'BirthRegistration'
    | 'DeathRegistration'
    | Promise<'BirthRegistration' | 'DeathRegistration'>
}
export interface GQLRegistrationCountResultTypeResolver<TParent = any> {
  results?: RegistrationCountResultToResultsResolver<TParent>
  total?: RegistrationCountResultToTotalResolver<TParent>
}

export interface RegistrationCountResultToResultsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationCountResultToTotalResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLLocationTypeResolver<TParent = any> {
  id?: LocationToIdResolver<TParent>
  _fhirID?: LocationTo_fhirIDResolver<TParent>
  identifier?: LocationToIdentifierResolver<TParent>
  status?: LocationToStatusResolver<TParent>
  name?: LocationToNameResolver<TParent>
  alias?: LocationToAliasResolver<TParent>
  description?: LocationToDescriptionResolver<TParent>
  partOf?: LocationToPartOfResolver<TParent>
  type?: LocationToTypeResolver<TParent>
  telecom?: LocationToTelecomResolver<TParent>
  address?: LocationToAddressResolver<TParent>
  longitude?: LocationToLongitudeResolver<TParent>
  latitude?: LocationToLatitudeResolver<TParent>
  altitude?: LocationToAltitudeResolver<TParent>
  geoData?: LocationToGeoDataResolver<TParent>
}

export interface LocationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationTo_fhirIDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToIdentifierResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToAliasResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToPartOfResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToTelecomResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToLongitudeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToLatitudeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToAltitudeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToGeoDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLUserTypeResolver<TParent = any> {
  id?: UserToIdResolver<TParent>
  userMgntUserID?: UserToUserMgntUserIDResolver<TParent>
  practitionerId?: UserToPractitionerIdResolver<TParent>
  name?: UserToNameResolver<TParent>
  username?: UserToUsernameResolver<TParent>
  mobile?: UserToMobileResolver<TParent>
  role?: UserToRoleResolver<TParent>
  type?: UserToTypeResolver<TParent>
  email?: UserToEmailResolver<TParent>
  status?: UserToStatusResolver<TParent>
  underInvestigation?: UserToUnderInvestigationResolver<TParent>
  primaryOffice?: UserToPrimaryOfficeResolver<TParent>
  catchmentArea?: UserToCatchmentAreaResolver<TParent>
  localRegistrar?: UserToLocalRegistrarResolver<TParent>
  identifier?: UserToIdentifierResolver<TParent>
  signature?: UserToSignatureResolver<TParent>
  creationDate?: UserToCreationDateResolver<TParent>
  avatar?: UserToAvatarResolver<TParent>
  device?: UserToDeviceResolver<TParent>
}

export interface UserToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToUserMgntUserIDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToPractitionerIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToUsernameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToMobileResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToUnderInvestigationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToPrimaryOfficeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToCatchmentAreaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToLocalRegistrarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToIdentifierResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToSignatureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToCreationDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToAvatarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToDeviceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLSearchUserResultTypeResolver<TParent = any> {
  results?: SearchUserResultToResultsResolver<TParent>
  totalItems?: SearchUserResultToTotalItemsResolver<TParent>
}

export interface SearchUserResultToResultsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SearchUserResultToTotalItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLSearchFieldAgentResultTypeResolver<TParent = any> {
  results?: SearchFieldAgentResultToResultsResolver<TParent>
  totalItems?: SearchFieldAgentResultToTotalItemsResolver<TParent>
}

export interface SearchFieldAgentResultToResultsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SearchFieldAgentResultToTotalItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLVerifyPasswordResultTypeResolver<TParent = any> {
  mobile?: VerifyPasswordResultToMobileResolver<TParent>
  scrope?: VerifyPasswordResultToScropeResolver<TParent>
  status?: VerifyPasswordResultToStatusResolver<TParent>
  username?: VerifyPasswordResultToUsernameResolver<TParent>
  id?: VerifyPasswordResultToIdResolver<TParent>
}

export interface VerifyPasswordResultToMobileResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface VerifyPasswordResultToScropeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface VerifyPasswordResultToStatusResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface VerifyPasswordResultToUsernameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface VerifyPasswordResultToIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLTotalMetricsResultTypeResolver<TParent = any> {
  estimated?: TotalMetricsResultToEstimatedResolver<TParent>
  results?: TotalMetricsResultToResultsResolver<TParent>
}

export interface TotalMetricsResultToEstimatedResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface TotalMetricsResultToResultsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLTotalVSExportTypeResolver<TParent = any> {
  results?: TotalVSExportToResultsResolver<TParent>
}

export interface TotalVSExportToResultsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLPaymentMetricTypeResolver<TParent = any> {
  total?: PaymentMetricToTotalResolver<TParent>
  paymentType?: PaymentMetricToPaymentTypeResolver<TParent>
}

export interface PaymentMetricToTotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PaymentMetricToPaymentTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLCertificationMetricTypeResolver<TParent = any> {
  total?: CertificationMetricToTotalResolver<TParent>
  eventType?: CertificationMetricToEventTypeResolver<TParent>
}

export interface CertificationMetricToTotalResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CertificationMetricToEventTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLCorrectionMetricTypeResolver<TParent = any> {
  total?: CorrectionMetricToTotalResolver<TParent>
  reason?: CorrectionMetricToReasonResolver<TParent>
}

export interface CorrectionMetricToTotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CorrectionMetricToReasonResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLLocationStatisticsResponseTypeResolver<TParent = any> {
  population?: LocationStatisticsResponseToPopulationResolver<TParent>
  registrars?: LocationStatisticsResponseToRegistrarsResolver<TParent>
  offices?: LocationStatisticsResponseToOfficesResolver<TParent>
}

export interface LocationStatisticsResponseToPopulationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationStatisticsResponseToRegistrarsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationStatisticsResponseToOfficesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLDeclarationsStartedMetricsTypeResolver<TParent = any> {
  fieldAgentDeclarations?: DeclarationsStartedMetricsToFieldAgentDeclarationsResolver<TParent>
  hospitalDeclarations?: DeclarationsStartedMetricsToHospitalDeclarationsResolver<TParent>
  officeDeclarations?: DeclarationsStartedMetricsToOfficeDeclarationsResolver<TParent>
}

export interface DeclarationsStartedMetricsToFieldAgentDeclarationsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeclarationsStartedMetricsToHospitalDeclarationsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeclarationsStartedMetricsToOfficeDeclarationsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLMonthWiseEstimationMetricTypeResolver<TParent = any> {
  total?: MonthWiseEstimationMetricToTotalResolver<TParent>
  withinTarget?: MonthWiseEstimationMetricToWithinTargetResolver<TParent>
  within1Year?: MonthWiseEstimationMetricToWithin1YearResolver<TParent>
  within5Years?: MonthWiseEstimationMetricToWithin5YearsResolver<TParent>
  estimated?: MonthWiseEstimationMetricToEstimatedResolver<TParent>
  month?: MonthWiseEstimationMetricToMonthResolver<TParent>
  year?: MonthWiseEstimationMetricToYearResolver<TParent>
}

export interface MonthWiseEstimationMetricToTotalResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface MonthWiseEstimationMetricToWithinTargetResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface MonthWiseEstimationMetricToWithin1YearResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface MonthWiseEstimationMetricToWithin5YearsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface MonthWiseEstimationMetricToEstimatedResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface MonthWiseEstimationMetricToMonthResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface MonthWiseEstimationMetricToYearResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLLocationWiseEstimationMetricTypeResolver<TParent = any> {
  total?: LocationWiseEstimationMetricToTotalResolver<TParent>
  withinTarget?: LocationWiseEstimationMetricToWithinTargetResolver<TParent>
  within1Year?: LocationWiseEstimationMetricToWithin1YearResolver<TParent>
  within5Years?: LocationWiseEstimationMetricToWithin5YearsResolver<TParent>
  estimated?: LocationWiseEstimationMetricToEstimatedResolver<TParent>
  locationId?: LocationWiseEstimationMetricToLocationIdResolver<TParent>
  locationName?: LocationWiseEstimationMetricToLocationNameResolver<TParent>
}

export interface LocationWiseEstimationMetricToTotalResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationWiseEstimationMetricToWithinTargetResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationWiseEstimationMetricToWithin1YearResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationWiseEstimationMetricToWithin5YearsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationWiseEstimationMetricToEstimatedResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationWiseEstimationMetricToLocationIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationWiseEstimationMetricToLocationNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLTimeLoggedMetricsResultSetTypeResolver<TParent = any> {
  results?: TimeLoggedMetricsResultSetToResultsResolver<TParent>
  totalItems?: TimeLoggedMetricsResultSetToTotalItemsResolver<TParent>
}

export interface TimeLoggedMetricsResultSetToResultsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface TimeLoggedMetricsResultSetToTotalItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLEventSearchResultSetTypeResolver<TParent = any> {
  results?: EventSearchResultSetToResultsResolver<TParent>
  totalItems?: EventSearchResultSetToTotalItemsResolver<TParent>
}

export interface EventSearchResultSetToResultsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventSearchResultSetToTotalItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLEventProgressResultSetTypeResolver<TParent = any> {
  results?: EventProgressResultSetToResultsResolver<TParent>
  totalItems?: EventProgressResultSetToTotalItemsResolver<TParent>
}

export interface EventProgressResultSetToResultsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventProgressResultSetToTotalItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLRoleTypeResolver<TParent = any> {
  id?: RoleToIdResolver<TParent>
  title?: RoleToTitleResolver<TParent>
  value?: RoleToValueResolver<TParent>
  types?: RoleToTypesResolver<TParent>
  active?: RoleToActiveResolver<TParent>
}

export interface RoleToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RoleToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RoleToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RoleToTypesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RoleToActiveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLCertificateSVGTypeResolver<TParent = any> {
  id?: CertificateSVGToIdResolver<TParent>
  svgCode?: CertificateSVGToSvgCodeResolver<TParent>
  svgFilename?: CertificateSVGToSvgFilenameResolver<TParent>
  svgDateUpdated?: CertificateSVGToSvgDateUpdatedResolver<TParent>
  svgDateCreated?: CertificateSVGToSvgDateCreatedResolver<TParent>
  user?: CertificateSVGToUserResolver<TParent>
  event?: CertificateSVGToEventResolver<TParent>
  status?: CertificateSVGToStatusResolver<TParent>
}

export interface CertificateSVGToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CertificateSVGToSvgCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CertificateSVGToSvgFilenameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CertificateSVGToSvgDateUpdatedResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CertificateSVGToSvgDateCreatedResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CertificateSVGToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CertificateSVGToEventResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CertificateSVGToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLFormDraftTypeResolver<TParent = any> {
  _id?: FormDraftTo_idResolver<TParent>
  event?: FormDraftToEventResolver<TParent>
  status?: FormDraftToStatusResolver<TParent>
  comment?: FormDraftToCommentResolver<TParent>
  version?: FormDraftToVersionResolver<TParent>
  history?: FormDraftToHistoryResolver<TParent>
  updatedAt?: FormDraftToUpdatedAtResolver<TParent>
  createdAt?: FormDraftToCreatedAtResolver<TParent>
}

export interface FormDraftTo_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface FormDraftToEventResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface FormDraftToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface FormDraftToCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface FormDraftToVersionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface FormDraftToHistoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface FormDraftToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface FormDraftToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLCreatedIdsTypeResolver<TParent = any> {
  compositionId?: CreatedIdsToCompositionIdResolver<TParent>
  trackingId?: CreatedIdsToTrackingIdResolver<TParent>
  registrationNumber?: CreatedIdsToRegistrationNumberResolver<TParent>
}

export interface CreatedIdsToCompositionIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CreatedIdsToTrackingIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CreatedIdsToRegistrationNumberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLReinstatedTypeResolver<TParent = any> {
  taskEntryResourceID?: ReinstatedToTaskEntryResourceIDResolver<TParent>
  registrationStatus?: ReinstatedToRegistrationStatusResolver<TParent>
}

export interface ReinstatedToTaskEntryResourceIDResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ReinstatedToRegistrationStatusResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLAvatarTypeResolver<TParent = any> {
  type?: AvatarToTypeResolver<TParent>
  data?: AvatarToDataResolver<TParent>
}

export interface AvatarToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AvatarToDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLApplicationConfigurationTypeResolver<TParent = any> {
  APPLICATION_NAME?: ApplicationConfigurationToAPPLICATION_NAMEResolver<TParent>
  BIRTH?: ApplicationConfigurationToBIRTHResolver<TParent>
  COUNTRY_LOGO?: ApplicationConfigurationToCOUNTRY_LOGOResolver<TParent>
  CURRENCY?: ApplicationConfigurationToCURRENCYResolver<TParent>
  DEATH?: ApplicationConfigurationToDEATHResolver<TParent>
  FIELD_AGENT_AUDIT_LOCATIONS?: ApplicationConfigurationToFIELD_AGENT_AUDIT_LOCATIONSResolver<TParent>
  HIDE_EVENT_REGISTER_INFORMATION?: ApplicationConfigurationToHIDE_EVENT_REGISTER_INFORMATIONResolver<TParent>
  EXTERNAL_VALIDATION_WORKQUEUE?: ApplicationConfigurationToEXTERNAL_VALIDATION_WORKQUEUEResolver<TParent>
  PHONE_NUMBER_PATTERN?: ApplicationConfigurationToPHONE_NUMBER_PATTERNResolver<TParent>
  NID_NUMBER_PATTERN?: ApplicationConfigurationToNID_NUMBER_PATTERNResolver<TParent>
  ADDRESSES?: ApplicationConfigurationToADDRESSESResolver<TParent>
}

export interface ApplicationConfigurationToAPPLICATION_NAMEResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ApplicationConfigurationToBIRTHResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ApplicationConfigurationToCOUNTRY_LOGOResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ApplicationConfigurationToCURRENCYResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ApplicationConfigurationToDEATHResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ApplicationConfigurationToFIELD_AGENT_AUDIT_LOCATIONSResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ApplicationConfigurationToHIDE_EVENT_REGISTER_INFORMATIONResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ApplicationConfigurationToEXTERNAL_VALIDATION_WORKQUEUEResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ApplicationConfigurationToPHONE_NUMBER_PATTERNResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ApplicationConfigurationToNID_NUMBER_PATTERNResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ApplicationConfigurationToADDRESSESResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLRegistrationTypeResolver<TParent = any> {
  id?: RegistrationToIdResolver<TParent>
  _fhirID?: RegistrationTo_fhirIDResolver<TParent>
  draftId?: RegistrationToDraftIdResolver<TParent>
  trackingId?: RegistrationToTrackingIdResolver<TParent>
  registrationNumber?: RegistrationToRegistrationNumberResolver<TParent>
  paperFormID?: RegistrationToPaperFormIDResolver<TParent>
  page?: RegistrationToPageResolver<TParent>
  book?: RegistrationToBookResolver<TParent>
  informantType?: RegistrationToInformantTypeResolver<TParent>
  otherInformantType?: RegistrationToOtherInformantTypeResolver<TParent>
  assignment?: RegistrationToAssignmentResolver<TParent>
  contact?: RegistrationToContactResolver<TParent>
  contactRelationship?: RegistrationToContactRelationshipResolver<TParent>
  contactPhoneNumber?: RegistrationToContactPhoneNumberResolver<TParent>
  status?: RegistrationToStatusResolver<TParent>
  type?: RegistrationToTypeResolver<TParent>
  inCompleteFields?: RegistrationToInCompleteFieldsResolver<TParent>
  attachments?: RegistrationToAttachmentsResolver<TParent>
  certificates?: RegistrationToCertificatesResolver<TParent>
  duplicates?: RegistrationToDuplicatesResolver<TParent>
}

export interface RegistrationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationTo_fhirIDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToDraftIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToTrackingIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToRegistrationNumberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToPaperFormIDResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToBookResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToInformantTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToOtherInformantTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToAssignmentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToContactResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToContactRelationshipResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToContactPhoneNumberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToInCompleteFieldsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToAttachmentsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToCertificatesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToDuplicatesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLRelatedPersonTypeResolver<TParent = any> {
  id?: RelatedPersonToIdResolver<TParent>
  _fhirID?: RelatedPersonTo_fhirIDResolver<TParent>
  relationship?: RelatedPersonToRelationshipResolver<TParent>
  otherRelationship?: RelatedPersonToOtherRelationshipResolver<TParent>
  affidavit?: RelatedPersonToAffidavitResolver<TParent>
  individual?: RelatedPersonToIndividualResolver<TParent>
}

export interface RelatedPersonToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RelatedPersonTo_fhirIDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RelatedPersonToRelationshipResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RelatedPersonToOtherRelationshipResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RelatedPersonToAffidavitResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RelatedPersonToIndividualResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLQuestionnaireQuestionTypeResolver<TParent = any> {
  fieldId?: QuestionnaireQuestionToFieldIdResolver<TParent>
  value?: QuestionnaireQuestionToValueResolver<TParent>
}

export interface QuestionnaireQuestionToFieldIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface QuestionnaireQuestionToValueResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLHistoryTypeResolver<TParent = any> {
  user?: HistoryToUserResolver<TParent>
  date?: HistoryToDateResolver<TParent>
  action?: HistoryToActionResolver<TParent>
  statusReason?: HistoryToStatusReasonResolver<TParent>
  reason?: HistoryToReasonResolver<TParent>
  reinstated?: HistoryToReinstatedResolver<TParent>
  location?: HistoryToLocationResolver<TParent>
  office?: HistoryToOfficeResolver<TParent>
  dhis2Notification?: HistoryToDhis2NotificationResolver<TParent>
  comments?: HistoryToCommentsResolver<TParent>
  input?: HistoryToInputResolver<TParent>
  output?: HistoryToOutputResolver<TParent>
  certificates?: HistoryToCertificatesResolver<TParent>
  signature?: HistoryToSignatureResolver<TParent>
}

export interface HistoryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface HistoryToDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface HistoryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface HistoryToStatusReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface HistoryToReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface HistoryToReinstatedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface HistoryToLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface HistoryToOfficeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface HistoryToDhis2NotificationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface HistoryToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface HistoryToInputResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface HistoryToOutputResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface HistoryToCertificatesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface HistoryToSignatureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLMedicalPractitionerTypeResolver<TParent = any> {
  name?: MedicalPractitionerToNameResolver<TParent>
  qualification?: MedicalPractitionerToQualificationResolver<TParent>
  lastVisitDate?: MedicalPractitionerToLastVisitDateResolver<TParent>
}

export interface MedicalPractitionerToNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface MedicalPractitionerToQualificationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface MedicalPractitionerToLastVisitDateResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLIdentityTypeTypeResolver<TParent = any> {
  id?: IdentityTypeToIdResolver<TParent>
  type?: IdentityTypeToTypeResolver<TParent>
  otherType?: IdentityTypeToOtherTypeResolver<TParent>
}

export interface IdentityTypeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface IdentityTypeToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface IdentityTypeToOtherTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLHumanNameTypeResolver<TParent = any> {
  use?: HumanNameToUseResolver<TParent>
  firstNames?: HumanNameToFirstNamesResolver<TParent>
  familyName?: HumanNameToFamilyNameResolver<TParent>
}

export interface HumanNameToUseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface HumanNameToFirstNamesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface HumanNameToFamilyNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLContactPointTypeResolver<TParent = any> {
  system?: ContactPointToSystemResolver<TParent>
  value?: ContactPointToValueResolver<TParent>
  use?: ContactPointToUseResolver<TParent>
}

export interface ContactPointToSystemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ContactPointToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ContactPointToUseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLAddressTypeResolver<TParent = any> {
  use?: AddressToUseResolver<TParent>
  type?: AddressToTypeResolver<TParent>
  text?: AddressToTextResolver<TParent>
  line?: AddressToLineResolver<TParent>
  lineName?: AddressToLineNameResolver<TParent>
  city?: AddressToCityResolver<TParent>
  district?: AddressToDistrictResolver<TParent>
  districtName?: AddressToDistrictNameResolver<TParent>
  state?: AddressToStateResolver<TParent>
  stateName?: AddressToStateNameResolver<TParent>
  postalCode?: AddressToPostalCodeResolver<TParent>
  country?: AddressToCountryResolver<TParent>
  from?: AddressToFromResolver<TParent>
  to?: AddressToToResolver<TParent>
}

export interface AddressToUseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToLineResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToLineNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToCityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToDistrictResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToDistrictNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToStateNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToPostalCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToCountryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToFromResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToToResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLAttachmentTypeResolver<TParent = any> {
  id?: AttachmentToIdResolver<TParent>
  _fhirID?: AttachmentTo_fhirIDResolver<TParent>
  contentType?: AttachmentToContentTypeResolver<TParent>
  data?: AttachmentToDataResolver<TParent>
  status?: AttachmentToStatusResolver<TParent>
  originalFileName?: AttachmentToOriginalFileNameResolver<TParent>
  systemFileName?: AttachmentToSystemFileNameResolver<TParent>
  type?: AttachmentToTypeResolver<TParent>
  description?: AttachmentToDescriptionResolver<TParent>
  subject?: AttachmentToSubjectResolver<TParent>
  createdAt?: AttachmentToCreatedAtResolver<TParent>
}

export interface AttachmentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AttachmentTo_fhirIDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AttachmentToContentTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AttachmentToDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AttachmentToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AttachmentToOriginalFileNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AttachmentToSystemFileNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AttachmentToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AttachmentToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AttachmentToSubjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AttachmentToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLDeceasedTypeResolver<TParent = any> {
  deceased?: DeceasedToDeceasedResolver<TParent>
  deathDate?: DeceasedToDeathDateResolver<TParent>
}

export interface DeceasedToDeceasedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeceasedToDeathDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLStatusWiseRegistrationCountTypeResolver<TParent = any> {
  status?: StatusWiseRegistrationCountToStatusResolver<TParent>
  count?: StatusWiseRegistrationCountToCountResolver<TParent>
}

export interface StatusWiseRegistrationCountToStatusResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface StatusWiseRegistrationCountToCountResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLIdentifierTypeResolver<TParent = any> {
  system?: IdentifierToSystemResolver<TParent>
  value?: IdentifierToValueResolver<TParent>
}

export interface IdentifierToSystemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface IdentifierToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLLocalRegistrarTypeResolver<TParent = any> {
  name?: LocalRegistrarToNameResolver<TParent>
  role?: LocalRegistrarToRoleResolver<TParent>
  signature?: LocalRegistrarToSignatureResolver<TParent>
}

export interface LocalRegistrarToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocalRegistrarToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocalRegistrarToSignatureResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLSignatureTypeResolver<TParent = any> {
  data?: SignatureToDataResolver<TParent>
  type?: SignatureToTypeResolver<TParent>
}

export interface SignatureToDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SignatureToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLSearchFieldAgentResponseTypeResolver<TParent = any> {
  practitionerId?: SearchFieldAgentResponseToPractitionerIdResolver<TParent>
  fullName?: SearchFieldAgentResponseToFullNameResolver<TParent>
  type?: SearchFieldAgentResponseToTypeResolver<TParent>
  status?: SearchFieldAgentResponseToStatusResolver<TParent>
  avatar?: SearchFieldAgentResponseToAvatarResolver<TParent>
  primaryOfficeId?: SearchFieldAgentResponseToPrimaryOfficeIdResolver<TParent>
  creationDate?: SearchFieldAgentResponseToCreationDateResolver<TParent>
  totalNumberOfDeclarationStarted?: SearchFieldAgentResponseToTotalNumberOfDeclarationStartedResolver<TParent>
  totalNumberOfInProgressAppStarted?: SearchFieldAgentResponseToTotalNumberOfInProgressAppStartedResolver<TParent>
  totalNumberOfRejectedDeclarations?: SearchFieldAgentResponseToTotalNumberOfRejectedDeclarationsResolver<TParent>
  averageTimeForDeclaredDeclarations?: SearchFieldAgentResponseToAverageTimeForDeclaredDeclarationsResolver<TParent>
}

export interface SearchFieldAgentResponseToPractitionerIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SearchFieldAgentResponseToFullNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SearchFieldAgentResponseToTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SearchFieldAgentResponseToStatusResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SearchFieldAgentResponseToAvatarResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SearchFieldAgentResponseToPrimaryOfficeIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SearchFieldAgentResponseToCreationDateResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SearchFieldAgentResponseToTotalNumberOfDeclarationStartedResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SearchFieldAgentResponseToTotalNumberOfInProgressAppStartedResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SearchFieldAgentResponseToTotalNumberOfRejectedDeclarationsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface SearchFieldAgentResponseToAverageTimeForDeclaredDeclarationsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLEstimationTypeResolver<TParent = any> {
  totalEstimation?: EstimationToTotalEstimationResolver<TParent>
  maleEstimation?: EstimationToMaleEstimationResolver<TParent>
  femaleEstimation?: EstimationToFemaleEstimationResolver<TParent>
  locationId?: EstimationToLocationIdResolver<TParent>
  estimationYear?: EstimationToEstimationYearResolver<TParent>
  locationLevel?: EstimationToLocationLevelResolver<TParent>
}

export interface EstimationToTotalEstimationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EstimationToMaleEstimationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EstimationToFemaleEstimationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EstimationToLocationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EstimationToEstimationYearResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EstimationToLocationLevelResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLEventMetricsTypeResolver<TParent = any> {
  total?: EventMetricsToTotalResolver<TParent>
  gender?: EventMetricsToGenderResolver<TParent>
  eventLocationType?: EventMetricsToEventLocationTypeResolver<TParent>
  timeLabel?: EventMetricsToTimeLabelResolver<TParent>
  practitionerRole?: EventMetricsToPractitionerRoleResolver<TParent>
}

export interface EventMetricsToTotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventMetricsToGenderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventMetricsToEventLocationTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventMetricsToTimeLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventMetricsToPractitionerRoleResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLVSEstimationTypeResolver<TParent = any> {
  event?: VSEstimationToEventResolver<TParent>
  year?: VSEstimationToYearResolver<TParent>
  fileSize?: VSEstimationToFileSizeResolver<TParent>
  url?: VSEstimationToUrlResolver<TParent>
  createdOn?: VSEstimationToCreatedOnResolver<TParent>
}

export interface VSEstimationToEventResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface VSEstimationToYearResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface VSEstimationToFileSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface VSEstimationToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface VSEstimationToCreatedOnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLTimeLoggedMetricsTypeResolver<TParent = any> {
  status?: TimeLoggedMetricsToStatusResolver<TParent>
  trackingId?: TimeLoggedMetricsToTrackingIdResolver<TParent>
  eventType?: TimeLoggedMetricsToEventTypeResolver<TParent>
  time?: TimeLoggedMetricsToTimeResolver<TParent>
}

export interface TimeLoggedMetricsToStatusResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface TimeLoggedMetricsToTrackingIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface TimeLoggedMetricsToEventTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface TimeLoggedMetricsToTimeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLEventSearchSetTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo):
    | 'BirthEventSearchSet'
    | 'DeathEventSearchSet'
    | Promise<'BirthEventSearchSet' | 'DeathEventSearchSet'>
}
export interface GQLEventProgressSetTypeResolver<TParent = any> {
  id?: EventProgressSetToIdResolver<TParent>
  type?: EventProgressSetToTypeResolver<TParent>
  name?: EventProgressSetToNameResolver<TParent>
  dateOfEvent?: EventProgressSetToDateOfEventResolver<TParent>
  registration?: EventProgressSetToRegistrationResolver<TParent>
  startedBy?: EventProgressSetToStartedByResolver<TParent>
  startedByFacility?: EventProgressSetToStartedByFacilityResolver<TParent>
  startedAt?: EventProgressSetToStartedAtResolver<TParent>
  progressReport?: EventProgressSetToProgressReportResolver<TParent>
}

export interface EventProgressSetToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventProgressSetToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventProgressSetToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventProgressSetToDateOfEventResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventProgressSetToRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventProgressSetToStartedByResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventProgressSetToStartedByFacilityResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventProgressSetToStartedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventProgressSetToProgressReportResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLDraftHistoryTypeResolver<TParent = any> {
  _id?: DraftHistoryTo_idResolver<TParent>
  version?: DraftHistoryToVersionResolver<TParent>
  status?: DraftHistoryToStatusResolver<TParent>
  comment?: DraftHistoryToCommentResolver<TParent>
  updatedAt?: DraftHistoryToUpdatedAtResolver<TParent>
}

export interface DraftHistoryTo_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DraftHistoryToVersionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DraftHistoryToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DraftHistoryToCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DraftHistoryToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLBirthTypeResolver<TParent = any> {
  REGISTRATION_TARGET?: BirthToREGISTRATION_TARGETResolver<TParent>
  LATE_REGISTRATION_TARGET?: BirthToLATE_REGISTRATION_TARGETResolver<TParent>
  FEE?: BirthToFEEResolver<TParent>
}

export interface BirthToREGISTRATION_TARGETResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthToLATE_REGISTRATION_TARGETResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthToFEEResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLCountryLogoTypeResolver<TParent = any> {
  fileName?: CountryLogoToFileNameResolver<TParent>
  file?: CountryLogoToFileResolver<TParent>
}

export interface CountryLogoToFileNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CountryLogoToFileResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLCurrencyTypeResolver<TParent = any> {
  isoCode?: CurrencyToIsoCodeResolver<TParent>
  languagesAndCountry?: CurrencyToLanguagesAndCountryResolver<TParent>
}

export interface CurrencyToIsoCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CurrencyToLanguagesAndCountryResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLDeathTypeResolver<TParent = any> {
  REGISTRATION_TARGET?: DeathToREGISTRATION_TARGETResolver<TParent>
  FEE?: DeathToFEEResolver<TParent>
}

export interface DeathToREGISTRATION_TARGETResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathToFEEResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLAssignmentDataTypeResolver<TParent = any> {
  userId?: AssignmentDataToUserIdResolver<TParent>
  firstName?: AssignmentDataToFirstNameResolver<TParent>
  lastName?: AssignmentDataToLastNameResolver<TParent>
  officeName?: AssignmentDataToOfficeNameResolver<TParent>
}

export interface AssignmentDataToUserIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AssignmentDataToFirstNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AssignmentDataToLastNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AssignmentDataToOfficeNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLRegWorkflowTypeResolver<TParent = any> {
  id?: RegWorkflowToIdResolver<TParent>
  type?: RegWorkflowToTypeResolver<TParent>
  user?: RegWorkflowToUserResolver<TParent>
  timestamp?: RegWorkflowToTimestampResolver<TParent>
  comments?: RegWorkflowToCommentsResolver<TParent>
  reason?: RegWorkflowToReasonResolver<TParent>
  location?: RegWorkflowToLocationResolver<TParent>
  office?: RegWorkflowToOfficeResolver<TParent>
  timeLogged?: RegWorkflowToTimeLoggedResolver<TParent>
}

export interface RegWorkflowToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegWorkflowToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegWorkflowToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegWorkflowToTimestampResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegWorkflowToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegWorkflowToReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegWorkflowToLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegWorkflowToOfficeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegWorkflowToTimeLoggedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLCertificateTypeResolver<TParent = any> {
  collector?: CertificateToCollectorResolver<TParent>
  hasShowedVerifiedDocument?: CertificateToHasShowedVerifiedDocumentResolver<TParent>
  payments?: CertificateToPaymentsResolver<TParent>
  data?: CertificateToDataResolver<TParent>
}

export interface CertificateToCollectorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CertificateToHasShowedVerifiedDocumentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CertificateToPaymentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CertificateToDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLStatusReasonTypeResolver<TParent = any> {
  text?: StatusReasonToTextResolver<TParent>
}

export interface StatusReasonToTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLCommentTypeResolver<TParent = any> {
  id?: CommentToIdResolver<TParent>
  user?: CommentToUserResolver<TParent>
  comment?: CommentToCommentResolver<TParent>
  createdAt?: CommentToCreatedAtResolver<TParent>
}

export interface CommentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentToCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLInputOutputTypeResolver<TParent = any> {
  valueCode?: InputOutputToValueCodeResolver<TParent>
  valueId?: InputOutputToValueIdResolver<TParent>
  valueString?: InputOutputToValueStringResolver<TParent>
}

export interface InputOutputToValueCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface InputOutputToValueIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface InputOutputToValueStringResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLRegistrationSearchSetTypeResolver<TParent = any> {
  status?: RegistrationSearchSetToStatusResolver<TParent>
  contactNumber?: RegistrationSearchSetToContactNumberResolver<TParent>
  contactRelationship?: RegistrationSearchSetToContactRelationshipResolver<TParent>
  dateOfDeclaration?: RegistrationSearchSetToDateOfDeclarationResolver<TParent>
  trackingId?: RegistrationSearchSetToTrackingIdResolver<TParent>
  registrationNumber?: RegistrationSearchSetToRegistrationNumberResolver<TParent>
  eventLocationId?: RegistrationSearchSetToEventLocationIdResolver<TParent>
  registeredLocationId?: RegistrationSearchSetToRegisteredLocationIdResolver<TParent>
  reason?: RegistrationSearchSetToReasonResolver<TParent>
  comment?: RegistrationSearchSetToCommentResolver<TParent>
  duplicates?: RegistrationSearchSetToDuplicatesResolver<TParent>
  createdAt?: RegistrationSearchSetToCreatedAtResolver<TParent>
  modifiedAt?: RegistrationSearchSetToModifiedAtResolver<TParent>
  assignment?: RegistrationSearchSetToAssignmentResolver<TParent>
}

export interface RegistrationSearchSetToStatusResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationSearchSetToContactNumberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationSearchSetToContactRelationshipResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationSearchSetToDateOfDeclarationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationSearchSetToTrackingIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationSearchSetToRegistrationNumberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationSearchSetToEventLocationIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationSearchSetToRegisteredLocationIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationSearchSetToReasonResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationSearchSetToCommentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationSearchSetToDuplicatesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationSearchSetToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationSearchSetToModifiedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationSearchSetToAssignmentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLOperationHistorySearchSetTypeResolver<TParent = any> {
  operationType?: OperationHistorySearchSetToOperationTypeResolver<TParent>
  operatedOn?: OperationHistorySearchSetToOperatedOnResolver<TParent>
  operatorRole?: OperationHistorySearchSetToOperatorRoleResolver<TParent>
  operatorName?: OperationHistorySearchSetToOperatorNameResolver<TParent>
  operatorOfficeName?: OperationHistorySearchSetToOperatorOfficeNameResolver<TParent>
  operatorOfficeAlias?: OperationHistorySearchSetToOperatorOfficeAliasResolver<TParent>
  notificationFacilityName?: OperationHistorySearchSetToNotificationFacilityNameResolver<TParent>
  notificationFacilityAlias?: OperationHistorySearchSetToNotificationFacilityAliasResolver<TParent>
  rejectReason?: OperationHistorySearchSetToRejectReasonResolver<TParent>
  rejectComment?: OperationHistorySearchSetToRejectCommentResolver<TParent>
}

export interface OperationHistorySearchSetToOperationTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface OperationHistorySearchSetToOperatedOnResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface OperationHistorySearchSetToOperatorRoleResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface OperationHistorySearchSetToOperatorNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface OperationHistorySearchSetToOperatorOfficeNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface OperationHistorySearchSetToOperatorOfficeAliasResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface OperationHistorySearchSetToNotificationFacilityNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface OperationHistorySearchSetToNotificationFacilityAliasResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface OperationHistorySearchSetToRejectReasonResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface OperationHistorySearchSetToRejectCommentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLBirthEventSearchSetTypeResolver<TParent = any> {
  id?: BirthEventSearchSetToIdResolver<TParent>
  type?: BirthEventSearchSetToTypeResolver<TParent>
  childName?: BirthEventSearchSetToChildNameResolver<TParent>
  dateOfBirth?: BirthEventSearchSetToDateOfBirthResolver<TParent>
  registration?: BirthEventSearchSetToRegistrationResolver<TParent>
  operationHistories?: BirthEventSearchSetToOperationHistoriesResolver<TParent>
}

export interface BirthEventSearchSetToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthEventSearchSetToTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthEventSearchSetToChildNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthEventSearchSetToDateOfBirthResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthEventSearchSetToRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthEventSearchSetToOperationHistoriesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLDeathEventSearchSetTypeResolver<TParent = any> {
  id?: DeathEventSearchSetToIdResolver<TParent>
  type?: DeathEventSearchSetToTypeResolver<TParent>
  deceasedName?: DeathEventSearchSetToDeceasedNameResolver<TParent>
  dateOfDeath?: DeathEventSearchSetToDateOfDeathResolver<TParent>
  registration?: DeathEventSearchSetToRegistrationResolver<TParent>
  operationHistories?: DeathEventSearchSetToOperationHistoriesResolver<TParent>
}

export interface DeathEventSearchSetToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathEventSearchSetToTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathEventSearchSetToDeceasedNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathEventSearchSetToDateOfDeathResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathEventSearchSetToRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathEventSearchSetToOperationHistoriesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLEventProgressDataTypeResolver<TParent = any> {
  timeInProgress?: EventProgressDataToTimeInProgressResolver<TParent>
  timeInReadyForReview?: EventProgressDataToTimeInReadyForReviewResolver<TParent>
  timeInRequiresUpdates?: EventProgressDataToTimeInRequiresUpdatesResolver<TParent>
  timeInWaitingForApproval?: EventProgressDataToTimeInWaitingForApprovalResolver<TParent>
  timeInWaitingForBRIS?: EventProgressDataToTimeInWaitingForBRISResolver<TParent>
  timeInReadyToPrint?: EventProgressDataToTimeInReadyToPrintResolver<TParent>
}

export interface EventProgressDataToTimeInProgressResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventProgressDataToTimeInReadyForReviewResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventProgressDataToTimeInRequiresUpdatesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventProgressDataToTimeInWaitingForApprovalResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventProgressDataToTimeInWaitingForBRISResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventProgressDataToTimeInReadyToPrintResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLBirthFeeTypeResolver<TParent = any> {
  ON_TIME?: BirthFeeToON_TIMEResolver<TParent>
  LATE?: BirthFeeToLATEResolver<TParent>
  DELAYED?: BirthFeeToDELAYEDResolver<TParent>
}

export interface BirthFeeToON_TIMEResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthFeeToLATEResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthFeeToDELAYEDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLDeathFeeTypeResolver<TParent = any> {
  ON_TIME?: DeathFeeToON_TIMEResolver<TParent>
  DELAYED?: DeathFeeToDELAYEDResolver<TParent>
}

export interface DeathFeeToON_TIMEResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathFeeToDELAYEDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLPaymentTypeResolver<TParent = any> {
  paymentId?: PaymentToPaymentIdResolver<TParent>
  type?: PaymentToTypeResolver<TParent>
  total?: PaymentToTotalResolver<TParent>
  amount?: PaymentToAmountResolver<TParent>
  outcome?: PaymentToOutcomeResolver<TParent>
  date?: PaymentToDateResolver<TParent>
}

export interface PaymentToPaymentIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PaymentToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PaymentToTotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PaymentToAmountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PaymentToOutcomeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PaymentToDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}
