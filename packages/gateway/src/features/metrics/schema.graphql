# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
# OpenCRVS is also distributed under the terms of the Civil Registration
# & Healthcare Disclaimer located at http://opencrvs.org/license.
#
# Copyright (C) The OpenCRVS Authors. OpenCRVS and the OpenCRVS
# graphic logo are (registered/a) trademark(s) of Plan International.

type EventMetrics {
  total: Int!
  gender: String!
  eventLocationType: String!
  timeLabel: String!
  practitionerRole: String!
}

type Estimation {
  totalEstimation: Int!
  maleEstimation: Int!
  femaleEstimation: Int!
  locationId: String!
  estimationYear: Int!
  locationLevel: String!
}

type VSEstimation {
  event: String
  year: Int
  fileSize: String
  url: String
  createdOn: String
}

type TotalMetricsResult {
  estimated: Estimation!
  results: [EventMetrics!]!
}
type TotalVSExport {
  results: [VSEstimation!]
}

type PaymentMetric {
  total: Float!
  paymentType: String!
}

type CertificationMetric {
  total: Float!
  eventType: String!
}

type CorrectionMetric {
  total: Float!
  reason: String!
}

type DeclarationsStartedMetrics {
  fieldAgentDeclarations: Int!
  hospitalDeclarations: Int!
  officeDeclarations: Int!
}

type MonthWiseEstimationMetric {
  total: Int!
  withinTarget: Int!
  within1Year: Int!
  within5Years: Int!
  estimated: Int!
  month: Int!
  year: Int!
}

type EventInTargetDayEstimationCount {
  actualTotalRegistration: Int!
  actualTargetDayRegistration: Int!
  estimatedRegistration: Float!
  estimatedTargetDayPercentage: Float!
}

type LocationWiseEstimationMetrics {
  details: [LocationWiseTargetDayEstimation]
  total: EventInTargetDayEstimationCount
}

type LocationWiseEstimationMetric {
  total: Int!
  withinTarget: Int!
  within1Year: Int!
  within5Years: Int!
  estimated: Int!
  locationId: String!
  locationName: String!
}

type TimeLoggedMetrics {
  status: String!
  trackingId: String
  eventType: String!
  time: String!
}

type TimeLoggedMetricsResultSet {
  results: [TimeLoggedMetrics]
  totalItems: Int
}

type LocationStatisticsResponse {
  population: Int
  registrars: Int!
  offices: Int!
}

type Query {
  getTotalMetrics(
    timeStart: String!
    timeEnd: String!
    locationId: String
    event: String!
  ): TotalMetricsResult
  getTotalVSExport: TotalVSExport
  getTotalPayments(
    timeStart: String!
    timeEnd: String!
    locationId: String
    event: String!
  ): [PaymentMetric!]
  getTotalCertifications(
    timeStart: String!
    timeEnd: String!
    locationId: String
  ): [CertificationMetric!]
  getTotalCorrections(
    timeStart: String!
    timeEnd: String!
    locationId: String
    event: String!
  ): [CorrectionMetric!]
  getLocationStatistics(
    locationId: String
    populationYear: Int!
  ): LocationStatisticsResponse
  getDeclarationsStartedMetrics(
    timeStart: String!
    timeEnd: String!
    locationId: String!
  ): DeclarationsStartedMetrics
  fetchMonthWiseEventMetrics(
    timeStart: String!
    timeEnd: String!
    locationId: String
    event: String!
  ): [MonthWiseEstimationMetric!]
  fetchLocationWiseEventMetrics(
    timeStart: String!
    timeEnd: String!
    locationId: String
    event: String!
  ): [LocationWiseEstimationMetric!]
  fetchTimeLoggedMetricsByPractitioner(
    timeStart: String!
    timeEnd: String!
    practitionerId: String!
    locationId: String!
    count: Int!
  ): TimeLoggedMetricsResultSet
}
